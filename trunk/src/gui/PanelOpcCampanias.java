/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelOpcCampanias.java
 *
 * Created on 19/04/2012, 15:41:25
 */
package gui;

import controllers.ControllerCampania;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.AbstractCellEditor;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import org.jdesktop.swingx.JXHyperlink;
import org.jdesktop.swingx.JXPanel;

/**
 *
 * @author Sebastian
 */

public class PanelOpcCampanias extends javax.swing.JPanel {
    static PanelOpcCampanias unicaInstancia;
    private int estadoCampania; //0=no hay campaña, 1=campania en curso, 2=campaña Pausada
    private Color colorOriginalBtnIniciar;
    private DefaultTableModel modeloTabla;
    private boolean modificandoCampania;
    private int NRO_COL_ID_CAMP;
    private int NRO_COL_FECHA_INI;
    private int NRO_COL_FECHA_FIN;
    private int NRO_COL_DURACION;
    private int NRO_COL_NOMBRE_CAMP;
    private int NRO_COL_BARCO;
    private int NRO_COL_CAPITAN;
    private int NRO_COL_ACCIONES;
    private int NRO_COL_TIENE_HISTORICO;
    private int cantColumnas;
    
    //</editor-fold>
    /** Creates new form PanelOpcCampanias */
    private PanelOpcCampanias() {
        initComponents();     
        inicializador();        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */  
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTitulo = new org.jdesktop.swingx.JXPanel();
        lblTituloCampanias = new org.jdesktop.swingx.JXLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        panelCentro = new org.jdesktop.swingx.JXPanel();
        panelTablaCampanias = new org.jdesktop.swingx.JXPanel();
        panelTituloTabla = new org.jdesktop.swingx.JXPanel();
        lblTituloTabla = new org.jdesktop.swingx.JXLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCampanias = new org.jdesktop.swingx.JXTable();
        panelAccionesCampElegida = new org.jdesktop.swingx.JXPanel();
        lblAccionesCampania = new org.jdesktop.swingx.JXLabel();
        panelAcciones = new org.jdesktop.swingx.JXPanel();
        btnModificar = new org.jdesktop.swingx.JXHyperlink();
        btnGuardar = new org.jdesktop.swingx.JXHyperlink();
        btnEliminar = new org.jdesktop.swingx.JXHyperlink();
        panelSeparador = new org.jdesktop.swingx.JXPanel();
        panelNuevaCampania = new org.jdesktop.swingx.JXPanel();
        panelTituloNuevaCampania = new org.jdesktop.swingx.JXPanel();
        lblNuevaCampania = new org.jdesktop.swingx.JXLabel();
        panelDatosNuevaCampania = new org.jdesktop.swingx.JXPanel();
        panelNombreCamp = new org.jdesktop.swingx.JXPanel();
        panelLblNombre = new org.jdesktop.swingx.JXPanel();
        lblNombre = new org.jdesktop.swingx.JXLabel();
        panelCampoNombre = new org.jdesktop.swingx.JXPanel();
        campoNombreCampania = new javax.swing.JTextField();
        panelBarcoCamp = new org.jdesktop.swingx.JXPanel();
        panelLbBarco = new org.jdesktop.swingx.JXPanel();
        lblBarco = new org.jdesktop.swingx.JXLabel();
        panelCampoBarco = new org.jdesktop.swingx.JXPanel();
        campoBarcoCampania = new javax.swing.JTextField();
        panelCapitanCamp = new org.jdesktop.swingx.JXPanel();
        panelLblCapitan = new org.jdesktop.swingx.JXPanel();
        lblCapitan = new org.jdesktop.swingx.JXLabel();
        panelCampoCapitan = new org.jdesktop.swingx.JXPanel();
        campoCapitanCampania = new javax.swing.JTextField();
        jXTaskPaneContainer1 = new org.jdesktop.swingx.JXTaskPaneContainer();
        historicoDeCampania = new org.jdesktop.swingx.JXTaskPane();
        panelHistorico = new org.jdesktop.swingx.JXPanel();
        chkHistoricoGpsSonda = new javax.swing.JCheckBox();
        chkHistoricoPeces = new javax.swing.JCheckBox();
        chkHistoricoSondaSets = new javax.swing.JCheckBox();
        panelLogueoHistorico = new org.jdesktop.swingx.JXPanel();
        btnIniciarLogueoHistorico = new javax.swing.JButton();
        btnDetenerLogueoHistorico = new javax.swing.JButton();
        panelBtnCampania = new org.jdesktop.swingx.JXPanel();
        btnComenzarCampania = new javax.swing.JButton();
        btnPausarReanudarCampania = new javax.swing.JButton();
        btnFinalizarCampania = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(500, 500));
        setMinimumSize(new java.awt.Dimension(500, 500));
        setPreferredSize(new java.awt.Dimension(500, 500));
        setLayout(new java.awt.BorderLayout());

        panelTitulo.setMaximumSize(new java.awt.Dimension(500, 40));
        panelTitulo.setMinimumSize(new java.awt.Dimension(500, 40));
        panelTitulo.setPreferredSize(new java.awt.Dimension(500, 40));
        panelTitulo.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        lblTituloCampanias.setText("Campañas");
        lblTituloCampanias.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        panelTitulo.add(lblTituloCampanias);

        add(panelTitulo, java.awt.BorderLayout.NORTH);

        jScrollPane2.setMaximumSize(new java.awt.Dimension(480, 410));
        jScrollPane2.setMinimumSize(new java.awt.Dimension(480, 410));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(480, 410));

        panelCentro.setMaximumSize(new java.awt.Dimension(460, 1510));
        panelCentro.setMinimumSize(new java.awt.Dimension(460, 676));
        panelCentro.setPreferredSize(new java.awt.Dimension(460, 676));
        panelCentro.setScrollableTracksViewportHeight(false);
        panelCentro.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        panelTablaCampanias.setMaximumSize(new java.awt.Dimension(450, 250));
        panelTablaCampanias.setMinimumSize(new java.awt.Dimension(450, 250));
        panelTablaCampanias.setPreferredSize(new java.awt.Dimension(450, 250));

        panelTituloTabla.setMaximumSize(new java.awt.Dimension(450, 30));
        panelTituloTabla.setMinimumSize(new java.awt.Dimension(450, 30));
        panelTituloTabla.setPreferredSize(new java.awt.Dimension(450, 30));
        panelTituloTabla.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lblTituloTabla.setText("Listado de campañas en disco:");
        lblTituloTabla.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        panelTituloTabla.add(lblTituloTabla);

        panelTablaCampanias.add(panelTituloTabla);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(450, 200));

        tablaCampanias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Fecha Inicio", "Fecha Fin", "Duración [dias]", "Nombre de Campaña", "Barco", "Capitan", "Acciones", "Historico"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaCampanias.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tablaCampanias.setRowHeight(30);
        tablaCampanias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCampaniasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaCampanias);
        tablaCampanias.getColumnModel().getColumn(0).setMinWidth(0);
        tablaCampanias.getColumnModel().getColumn(0).setPreferredWidth(0);
        tablaCampanias.getColumnModel().getColumn(0).setMaxWidth(0);
        tablaCampanias.getColumnModel().getColumn(3).setMinWidth(0);
        tablaCampanias.getColumnModel().getColumn(3).setPreferredWidth(0);
        tablaCampanias.getColumnModel().getColumn(4).setMinWidth(90);
        tablaCampanias.getColumnModel().getColumn(4).setPreferredWidth(90);
        tablaCampanias.getColumnModel().getColumn(7).setMinWidth(0);
        tablaCampanias.getColumnModel().getColumn(7).setPreferredWidth(0);
        tablaCampanias.getColumnModel().getColumn(7).setMaxWidth(0);
        tablaCampanias.getColumnModel().getColumn(8).setMinWidth(30);
        tablaCampanias.getColumnModel().getColumn(8).setPreferredWidth(30);
        tablaCampanias.getColumnModel().getColumn(8).setMaxWidth(30);

        panelTablaCampanias.add(jScrollPane1);

        panelCentro.add(panelTablaCampanias);

        panelAccionesCampElegida.setMaximumSize(new java.awt.Dimension(450, 30));
        panelAccionesCampElegida.setMinimumSize(new java.awt.Dimension(450, 30));
        panelAccionesCampElegida.setPreferredSize(new java.awt.Dimension(450, 30));
        panelAccionesCampElegida.setLayout(new java.awt.GridLayout(1, 2));

        lblAccionesCampania.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccionesCampania.setText("Acciones sobre la campaña elegida:");
        lblAccionesCampania.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        panelAccionesCampElegida.add(lblAccionesCampania);

        panelAcciones.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 20, 5));

        btnModificar.setText("");
        btnModificar.setToolTipText("Modificar campaña");
        btnModificar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        panelAcciones.add(btnModificar);

        btnGuardar.setText("");
        btnGuardar.setToolTipText("Guardar cambios");
        btnGuardar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        panelAcciones.add(btnGuardar);

        btnEliminar.setText("");
        btnEliminar.setToolTipText("Eliminar campaña");
        btnEliminar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        panelAcciones.add(btnEliminar);

        panelAccionesCampElegida.add(panelAcciones);

        panelCentro.add(panelAccionesCampElegida);

        panelSeparador.setPreferredSize(new java.awt.Dimension(450, 30));
        panelCentro.add(panelSeparador);

        panelNuevaCampania.setMaximumSize(new java.awt.Dimension(450, 160));
        panelNuevaCampania.setMinimumSize(new java.awt.Dimension(450, 160));
        panelNuevaCampania.setPreferredSize(new java.awt.Dimension(450, 160));
        panelNuevaCampania.setLayout(new java.awt.BorderLayout());

        panelTituloNuevaCampania.setMaximumSize(new java.awt.Dimension(450, 30));
        panelTituloNuevaCampania.setMinimumSize(new java.awt.Dimension(450, 30));
        panelTituloNuevaCampania.setPreferredSize(new java.awt.Dimension(450, 30));
        panelTituloNuevaCampania.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 10));

        lblNuevaCampania.setText("Nueva Campaña:");
        lblNuevaCampania.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        panelTituloNuevaCampania.add(lblNuevaCampania);

        panelNuevaCampania.add(panelTituloNuevaCampania, java.awt.BorderLayout.NORTH);

        panelDatosNuevaCampania.setMaximumSize(new java.awt.Dimension(450, 130));
        panelDatosNuevaCampania.setMinimumSize(new java.awt.Dimension(450, 130));
        panelDatosNuevaCampania.setPreferredSize(new java.awt.Dimension(450, 130));
        panelDatosNuevaCampania.setLayout(new java.awt.GridLayout(3, 1));

        panelNombreCamp.setMaximumSize(new java.awt.Dimension(450, 43));
        panelNombreCamp.setMinimumSize(new java.awt.Dimension(450, 43));
        panelNombreCamp.setPreferredSize(new java.awt.Dimension(450, 43));
        panelNombreCamp.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        panelLblNombre.setMaximumSize(new java.awt.Dimension(100, 43));
        panelLblNombre.setMinimumSize(new java.awt.Dimension(100, 43));
        panelLblNombre.setPreferredSize(new java.awt.Dimension(100, 43));
        panelLblNombre.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 10));

        lblNombre.setText("Nombre");
        lblNombre.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        panelLblNombre.add(lblNombre);

        panelNombreCamp.add(panelLblNombre);

        panelCampoNombre.setMaximumSize(new java.awt.Dimension(350, 43));
        panelCampoNombre.setMinimumSize(new java.awt.Dimension(350, 43));
        panelCampoNombre.setPreferredSize(new java.awt.Dimension(350, 43));
        panelCampoNombre.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 10));

        campoNombreCampania.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        campoNombreCampania.setMaximumSize(new java.awt.Dimension(200, 21));
        campoNombreCampania.setMinimumSize(new java.awt.Dimension(200, 21));
        campoNombreCampania.setPreferredSize(new java.awt.Dimension(200, 21));
        panelCampoNombre.add(campoNombreCampania);

        panelNombreCamp.add(panelCampoNombre);

        panelDatosNuevaCampania.add(panelNombreCamp);

        panelBarcoCamp.setMaximumSize(new java.awt.Dimension(450, 43));
        panelBarcoCamp.setMinimumSize(new java.awt.Dimension(450, 43));
        panelBarcoCamp.setPreferredSize(new java.awt.Dimension(450, 43));
        panelBarcoCamp.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        panelLbBarco.setMaximumSize(new java.awt.Dimension(100, 43));
        panelLbBarco.setMinimumSize(new java.awt.Dimension(100, 43));
        panelLbBarco.setPreferredSize(new java.awt.Dimension(100, 43));
        panelLbBarco.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 10));

        lblBarco.setText("Barco");
        lblBarco.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        panelLbBarco.add(lblBarco);

        panelBarcoCamp.add(panelLbBarco);

        panelCampoBarco.setMaximumSize(new java.awt.Dimension(350, 43));
        panelCampoBarco.setMinimumSize(new java.awt.Dimension(350, 43));
        panelCampoBarco.setPreferredSize(new java.awt.Dimension(350, 43));
        panelCampoBarco.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 10));

        campoBarcoCampania.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        campoBarcoCampania.setMaximumSize(new java.awt.Dimension(200, 21));
        campoBarcoCampania.setMinimumSize(new java.awt.Dimension(200, 21));
        campoBarcoCampania.setPreferredSize(new java.awt.Dimension(200, 21));
        panelCampoBarco.add(campoBarcoCampania);

        panelBarcoCamp.add(panelCampoBarco);

        panelDatosNuevaCampania.add(panelBarcoCamp);

        panelCapitanCamp.setMaximumSize(new java.awt.Dimension(450, 43));
        panelCapitanCamp.setMinimumSize(new java.awt.Dimension(450, 43));
        panelCapitanCamp.setPreferredSize(new java.awt.Dimension(450, 43));
        panelCapitanCamp.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        panelLblCapitan.setMaximumSize(new java.awt.Dimension(100, 43));
        panelLblCapitan.setMinimumSize(new java.awt.Dimension(100, 43));
        panelLblCapitan.setPreferredSize(new java.awt.Dimension(100, 43));
        panelLblCapitan.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 10));

        lblCapitan.setText("Capitan");
        lblCapitan.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        panelLblCapitan.add(lblCapitan);

        panelCapitanCamp.add(panelLblCapitan);

        panelCampoCapitan.setMaximumSize(new java.awt.Dimension(350, 43));
        panelCampoCapitan.setMinimumSize(new java.awt.Dimension(350, 43));
        panelCampoCapitan.setPreferredSize(new java.awt.Dimension(350, 43));
        panelCampoCapitan.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 10));

        campoCapitanCampania.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        campoCapitanCampania.setMaximumSize(new java.awt.Dimension(200, 21));
        campoCapitanCampania.setMinimumSize(new java.awt.Dimension(200, 21));
        campoCapitanCampania.setPreferredSize(new java.awt.Dimension(200, 21));
        panelCampoCapitan.add(campoCapitanCampania);

        panelCapitanCamp.add(panelCampoCapitan);

        panelDatosNuevaCampania.add(panelCapitanCamp);

        panelNuevaCampania.add(panelDatosNuevaCampania, java.awt.BorderLayout.CENTER);

        panelCentro.add(panelNuevaCampania);

        jXTaskPaneContainer1.setBackground(new java.awt.Color(240, 240, 240));
        jXTaskPaneContainer1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        historicoDeCampania.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        historicoDeCampania.setTitle("Historico de campaña:");
        historicoDeCampania.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        panelHistorico.setMaximumSize(new java.awt.Dimension(450, 150));
        panelHistorico.setMinimumSize(new java.awt.Dimension(450, 150));
        panelHistorico.setPreferredSize(new java.awt.Dimension(450, 150));
        panelHistorico.setLayout(new java.awt.GridLayout(5, 1));

        chkHistoricoGpsSonda.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkHistoricoGpsSonda.setSelected(true);
        chkHistoricoGpsSonda.setText("Guardar datos del GPS y la Sonda");
        chkHistoricoGpsSonda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkHistoricoGpsSondaActionPerformed(evt);
            }
        });
        panelHistorico.add(chkHistoricoGpsSonda);

        chkHistoricoPeces.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkHistoricoPeces.setSelected(true);
        chkHistoricoPeces.setText("Guardar datos obtenidos del procesamiento de imagen");
        chkHistoricoPeces.setEnabled(false);
        panelHistorico.add(chkHistoricoPeces);

        chkHistoricoSondaSets.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkHistoricoSondaSets.setSelected(true);
        chkHistoricoSondaSets.setText("Guardar datos de configuración de la sonda");
        chkHistoricoSondaSets.setEnabled(false);
        chkHistoricoSondaSets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkHistoricoSondaSetsActionPerformed(evt);
            }
        });
        panelHistorico.add(chkHistoricoSondaSets);

        panelLogueoHistorico.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 3));

        btnIniciarLogueoHistorico.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnIniciarLogueoHistorico.setText("Iniciar Logueo");
        btnIniciarLogueoHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarLogueoHistoricoActionPerformed(evt);
            }
        });
        panelLogueoHistorico.add(btnIniciarLogueoHistorico);

        btnDetenerLogueoHistorico.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnDetenerLogueoHistorico.setText("Detener Logueo");
        btnDetenerLogueoHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetenerLogueoHistoricoActionPerformed(evt);
            }
        });
        panelLogueoHistorico.add(btnDetenerLogueoHistorico);

        panelHistorico.add(panelLogueoHistorico);

        historicoDeCampania.add(panelHistorico);

        jXTaskPaneContainer1.add(historicoDeCampania);

        panelCentro.add(jXTaskPaneContainer1);

        jScrollPane2.setViewportView(panelCentro);

        add(jScrollPane2, java.awt.BorderLayout.LINE_END);

        panelBtnCampania.setMaximumSize(new java.awt.Dimension(500, 50));
        panelBtnCampania.setMinimumSize(new java.awt.Dimension(500, 50));
        panelBtnCampania.setPreferredSize(new java.awt.Dimension(500, 50));
        panelBtnCampania.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        btnComenzarCampania.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnComenzarCampania.setText("Iniciar campaña");
        btnComenzarCampania.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComenzarCampaniaActionPerformed(evt);
            }
        });
        panelBtnCampania.add(btnComenzarCampania);

        btnPausarReanudarCampania.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnPausarReanudarCampania.setText("Pausar campaña");
        btnPausarReanudarCampania.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPausarReanudarCampaniaActionPerformed(evt);
            }
        });
        panelBtnCampania.add(btnPausarReanudarCampania);

        btnFinalizarCampania.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnFinalizarCampania.setText("Finalizar campaña");
        btnFinalizarCampania.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarCampaniaActionPerformed(evt);
            }
        });
        panelBtnCampania.add(btnFinalizarCampania);

        add(panelBtnCampania, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

private void btnComenzarCampaniaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComenzarCampaniaActionPerformed
        if (validaCampos()) {
            if (controllers.ControllerCampania.getInstance().nuevaCampania(campoNombreCampania.getText(), campoCapitanCampania.getText(), campoBarcoCampania.getText())){
                setGuiCampaniaIniciada();
                //controllers.ControllerCampania.getInstance().getIdCampaniaEnCurso();
                btnIniciarLogueoHistoricoActionPerformed(null);
            }
            else
              { JOptionPane.showMessageDialog(null, "Hubo un error al intentar guardar la nueva campaña"); }
        }
}//GEN-LAST:event_btnComenzarCampaniaActionPerformed

private void btnPausarReanudarCampaniaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPausarReanudarCampaniaActionPerformed
    if (!(getEstadoCampania()==2)){
        setGuiCampaniaPausada();
        if (persistencia.BrokerHistoricoPunto.getInstance().estaLogueando()){
            btnDetenerLogueoHistoricoActionPerformed(null);
        }        
    }
    else
        { setGuiCampaniaReanudada(); 
          if (!(persistencia.BrokerHistoricoPunto.getInstance().estaLogueando())){
                btnIniciarLogueoHistoricoActionPerformed(null);
          }
        }
    
}//GEN-LAST:event_btnPausarReanudarCampaniaActionPerformed

private void btnFinalizarCampaniaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarCampaniaActionPerformed
        if (JOptionPane.showConfirmDialog(null,
                    "Atención! Está por finalizar la campaña en curso, está seguro?",
                    "Finalizar campaña", 
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE
                    ) == 0) {
            if (ControllerCampania.getInstance().finalizaCampaniaEnCurso()){
                btnDetenerLogueoHistoricoActionPerformed(null);
                setGuiCampaniaFinalizada();
            }
            else 
                { JOptionPane.showConfirmDialog(null, "No se pudo finalizar la Campaña en curso"); }
        }
}//GEN-LAST:event_btnFinalizarCampaniaActionPerformed

private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
    String txtPregunta = "Está por eliminar una campaña del disco, está usted seguro?";
    boolean tieneHistorico = (Boolean) modeloTabla.getValueAt(tablaCampanias.getSelectedRow(), NRO_COL_TIENE_HISTORICO);
    if (tieneHistorico){
        txtPregunta = "ATENCIÓN! La campaña que pretende eliminar del disco contiene datos históricos, está seguro que desea eliminar la campaña y su historico?";
    }
    if (JOptionPane.showConfirmDialog(null, txtPregunta, "Eliminar campaña seleccionada", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
        controllers.ControllerCampania.getInstance().borrarCampania(getIdDeCampaniaSeleccionada());
        controlaPanelAccionesCampania();        
    }
}//GEN-LAST:event_btnEliminarActionPerformed

private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
    setGuiModificarFilaElegida();
    setModificandoCampania(true);
    controlaPanelAccionesCampania();    
}//GEN-LAST:event_btnModificarActionPerformed

private void tablaCampaniasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCampaniasMouseClicked
    controlaPanelAccionesCampania();
}//GEN-LAST:event_tablaCampaniasMouseClicked

private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
    if (guardarCampaniaModificada()){
        setModificandoCampania(false);
        controlaPanelAccionesCampania();
        lblNuevaCampania.setText("Nueva Campaña:");
        cargarDatosDeCampaniaEnCurso();        
    }
}//GEN-LAST:event_btnGuardarActionPerformed

    private void chkHistoricoGpsSondaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkHistoricoGpsSondaActionPerformed
        clickEnChkHistoricoGpsSonda();
    }//GEN-LAST:event_chkHistoricoGpsSondaActionPerformed

    private void chkHistoricoSondaSetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkHistoricoSondaSetsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkHistoricoSondaSetsActionPerformed

    private void btnIniciarLogueoHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarLogueoHistoricoActionPerformed
        if (gui.PanelOpcCampanias.getInstance().getChkHistoricoGpsSonda().isSelected()){
            controllers.ControllerCampania.getInstance().iniciarLogueoHistorico();
            setGuiHistoricoLogueando(true);
        }
        else
          { JOptionPane.showMessageDialog(null, "Para iniciar el alojamiento de historico deben guardarse los datos leidos por el GPS"); }                        
    }//GEN-LAST:event_btnIniciarLogueoHistoricoActionPerformed

    private void btnDetenerLogueoHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetenerLogueoHistoricoActionPerformed
        controllers.ControllerCampania.getInstance().detenerLogueoHistorico();
        setGuiHistoricoLogueando(false);
    }//GEN-LAST:event_btnDetenerLogueoHistoricoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComenzarCampania;
    private javax.swing.JButton btnDetenerLogueoHistorico;
    private org.jdesktop.swingx.JXHyperlink btnEliminar;
    private javax.swing.JButton btnFinalizarCampania;
    private org.jdesktop.swingx.JXHyperlink btnGuardar;
    private javax.swing.JButton btnIniciarLogueoHistorico;
    private org.jdesktop.swingx.JXHyperlink btnModificar;
    private javax.swing.JButton btnPausarReanudarCampania;
    private javax.swing.JTextField campoBarcoCampania;
    private javax.swing.JTextField campoCapitanCampania;
    private javax.swing.JTextField campoNombreCampania;
    private javax.swing.JCheckBox chkHistoricoGpsSonda;
    private javax.swing.JCheckBox chkHistoricoPeces;
    private javax.swing.JCheckBox chkHistoricoSondaSets;
    private org.jdesktop.swingx.JXTaskPane historicoDeCampania;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.swingx.JXTaskPaneContainer jXTaskPaneContainer1;
    private org.jdesktop.swingx.JXLabel lblAccionesCampania;
    private org.jdesktop.swingx.JXLabel lblBarco;
    private org.jdesktop.swingx.JXLabel lblCapitan;
    private org.jdesktop.swingx.JXLabel lblNombre;
    private org.jdesktop.swingx.JXLabel lblNuevaCampania;
    private org.jdesktop.swingx.JXLabel lblTituloCampanias;
    private org.jdesktop.swingx.JXLabel lblTituloTabla;
    private org.jdesktop.swingx.JXPanel panelAcciones;
    private org.jdesktop.swingx.JXPanel panelAccionesCampElegida;
    private org.jdesktop.swingx.JXPanel panelBarcoCamp;
    private org.jdesktop.swingx.JXPanel panelBtnCampania;
    private org.jdesktop.swingx.JXPanel panelCampoBarco;
    private org.jdesktop.swingx.JXPanel panelCampoCapitan;
    private org.jdesktop.swingx.JXPanel panelCampoNombre;
    private org.jdesktop.swingx.JXPanel panelCapitanCamp;
    private org.jdesktop.swingx.JXPanel panelCentro;
    private org.jdesktop.swingx.JXPanel panelDatosNuevaCampania;
    private org.jdesktop.swingx.JXPanel panelHistorico;
    private org.jdesktop.swingx.JXPanel panelLbBarco;
    private org.jdesktop.swingx.JXPanel panelLblCapitan;
    private org.jdesktop.swingx.JXPanel panelLblNombre;
    private org.jdesktop.swingx.JXPanel panelLogueoHistorico;
    private org.jdesktop.swingx.JXPanel panelNombreCamp;
    private org.jdesktop.swingx.JXPanel panelNuevaCampania;
    private org.jdesktop.swingx.JXPanel panelSeparador;
    private org.jdesktop.swingx.JXPanel panelTablaCampanias;
    private org.jdesktop.swingx.JXPanel panelTitulo;
    private org.jdesktop.swingx.JXPanel panelTituloNuevaCampania;
    private org.jdesktop.swingx.JXPanel panelTituloTabla;
    private org.jdesktop.swingx.JXTable tablaCampanias;
    // End of variables declaration//GEN-END:variables
    
    private void controlaPanelNuevaCampania(boolean estado){
        lblNuevaCampania.setEnabled(estado);
        lblNombre.setEnabled(estado);
        campoNombreCampania.setEnabled(estado);
        lblBarco.setEnabled(estado);
        campoBarcoCampania.setEnabled(estado);
        lblCapitan.setEnabled(estado);
        campoCapitanCampania.setEnabled(estado);        
    }
    
    private void controlaPanelAccionesCampania(){
        boolean estado;
        if ((modeloTabla.getRowCount()>0) && (getIdDeCampaniaSeleccionada()>=0) && (getIdDeCampaniaSeleccionada() != ControllerCampania.getInstance().getIdCampaniaEnCurso())){
           estado = true;
        }
        else { estado = false; }
        lblAccionesCampania.setEnabled(estado);
        btnEliminar.setEnabled(estado);
        btnModificar.setEnabled(estado);
        btnGuardar.setEnabled(estado);        
        if (isModificandoCampania()){
            btnGuardar.setVisible(true);            
            btnModificar.setVisible(false);
            btnEliminar.setVisible(false);
            tablaCampanias.setEnabled(false);
            btnComenzarCampania.setEnabled(false);
            btnFinalizarCampania.setEnabled(false);
            btnPausarReanudarCampania.setEnabled(false);
        }
        else
            { btnGuardar.setVisible(false); 
              btnModificar.setVisible(true);
              btnEliminar.setVisible(true);
              tablaCampanias.setEnabled(true);
              btnComenzarCampania.setEnabled(true);
              btnFinalizarCampania.setEnabled(true);
              btnPausarReanudarCampania.setEnabled(true);              
            }
    }

    public static PanelOpcCampanias getInstance() {
       if (unicaInstancia == null) {
          unicaInstancia = new PanelOpcCampanias();
       }
       return unicaInstancia;
    }    
    
/* codigo de prueba para poder probar un panel simplemente haciendo "Run File" sobre su clase    
     public static void main(String[] args) {
        javax.swing.JFrame elFrame = new javax.swing.JFrame();
        JPanel elPanel= new PanelOpcCampanias();
        elFrame.setSize(500,500);
        elFrame.add(elPanel); 
        elFrame.setVisible(true);
    }
*/    

    public void setGuiCampaniaIniciada() {
        controlaPanelNuevaCampania(false);
        btnComenzarCampania.setVisible(false);
        btnFinalizarCampania.setVisible(true);
        btnPausarReanudarCampania.setVisible(true);
        historicoDeCampania.setVisible(true);
        setEstadoCampania(1);
        // controllers.ControllerCampania.getInstance().obtenerCampanias();        
    }
    
    public void setGuiCampaniaPausada() {
        btnPausarReanudarCampania.setText("Reanudar campaña");
        setEstadoCampania(2);
        // controllers.ControllerCampania.getInstance().obtenerCampanias();
    }
    
    public void setGuiCampaniaReanudada() {
        btnPausarReanudarCampania.setText("Pausar campaña");        
        setEstadoCampania(1);
        // controllers.ControllerCampania.getInstance().obtenerCampanias();
    }
    
    public void setGuiCampaniaFinalizada() {
        controlaPanelNuevaCampania(true);
        campoBarcoCampania.setText("");
        campoCapitanCampania.setText("");
        campoNombreCampania.setText("");        
        btnPausarReanudarCampania.setVisible(false);
        btnFinalizarCampania.setVisible(false);
        btnComenzarCampania.setVisible(true);
        btnPausarReanudarCampania.setText("Pausar campaña");
        setEstadoCampania(0);
        historicoDeCampania.setVisible(false);
        // controllers.ControllerCampania.getInstance().obtenerCampanias();
    }

    /**
     * @return the colorOriginalBtnIniciar
     */
    public Color getColorOriginalBtnIniciar() {
        return colorOriginalBtnIniciar;
    }

    /**
     * @param colorOriginalBtnIniciar the colorOriginalBtnIniciar to set
     */
    public void setColorOriginalBtnIniciar(Color colorOriginalBtnIniciar) {
        this.colorOriginalBtnIniciar = colorOriginalBtnIniciar;
    }

    /**
     * @return the estadoCampania
     */
    public int getEstadoCampania() {
        return estadoCampania;
    }

    /**
     * @param estadoCampania the estadoCampania to set
     */
    public void setEstadoCampania(int estadoCampania) {
        this.estadoCampania = estadoCampania;
        controlaPanelAccionesCampania();        
    }

    public void vaciaTabla() {                
        modeloTabla.setRowCount(0);
    }

    public void agregaUnaFilaCampania(int id, String nombre, String barco, String capitan,
            int estado, Date fechaInicio, Date fechaFin, boolean tieneHistorico) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Object[] fila = new Object[cantColumnas]; //creamos la fila
        fila[NRO_COL_ACCIONES]=panelAcciones;
        if (fechaInicio != null) { fila[NRO_COL_FECHA_INI]=sdf.format(fechaInicio); }
        if (fechaFin != null){ fila[NRO_COL_FECHA_FIN]=sdf.format(fechaFin); }
        fila[NRO_COL_CAPITAN]=capitan;
        fila[NRO_COL_NOMBRE_CAMP]=nombre;
        fila[NRO_COL_BARCO]=barco;
        fila[NRO_COL_ID_CAMP]=id;
        fila[NRO_COL_TIENE_HISTORICO]=tieneHistorico;

        modeloTabla.addRow(fila);
    }

    private void inicializador() {
        estadoCampania=0; //0=no hay campaña, 1=campania en curso, 2=campaña Pausada   
        modificandoCampania=false;
        NRO_COL_ID_CAMP=0;
        NRO_COL_FECHA_INI=1;
        NRO_COL_FECHA_FIN=2;
        NRO_COL_DURACION=3;
        NRO_COL_NOMBRE_CAMP=4;
        NRO_COL_BARCO=5;
        NRO_COL_CAPITAN=6;
        NRO_COL_ACCIONES=7;
        NRO_COL_TIENE_HISTORICO=8;
        cantColumnas=9;        
        modeloTabla = (DefaultTableModel) tablaCampanias.getModel();
        tablaCampanias.setModel(modeloTabla);
        btnDetenerLogueoHistorico.setVisible(false);
        historicoDeCampania.setVisible(false);
        cargaIconosDeBotones();
        cargaGrillaCampanias();
        setGuiCampaniaFinalizada();    
        controlaPanelAccionesCampania();
    }
    
    public int getIdDeCampaniaSeleccionada(){
        int salida = -1;
        int filaSeleccionada = tablaCampanias.getSelectedRow();
        if (filaSeleccionada>=0){
            salida = (Integer) modeloTabla.getValueAt(filaSeleccionada, NRO_COL_ID_CAMP);
        }                
        return salida;
    }
    
    public void cargaGrillaCampanias() {        
        vaciaTabla();
        ArrayList<modelo.dataManager.Campania> campanias = modelo.dataManager.AdministraCampanias.getInstance().getCampanias();
        if ((campanias == null) || (campanias.size() == 0) ) {
            modelo.dataManager.AdministraCampanias.getInstance().leerCampaniasDeLaDB();
            campanias = modelo.dataManager.AdministraCampanias.getInstance().getCampanias();            
        }        
        if ((!(campanias == null)) && (campanias.size() > 0)) {
            // while (), pongo cada objeto Campania en la grilla de campanias                    
            int i = 0;
            while (i < campanias.size()) {
                agregaUnaFilaCampania(
                        campanias.get(i).getId(),
                        campanias.get(i).getDescripcion(),
                        campanias.get(i).getBarco(),
                        campanias.get(i).getCapitan(),
                        campanias.get(i).getEstado(),
                        campanias.get(i).getFechaInicio(),
                        campanias.get(i).getFechaFin(),
                        (campanias.get(i).getFolderHistorico() != null && campanias.get(i).getFolderHistorico().length() > 0)
                        );
                i++;
            }
            marcaCampaniaEnCurso();
        }
    }

    public void setGuiModificarFilaElegida() {
       int filaSeleccionada = tablaCampanias.getSelectedRow();
       if (filaSeleccionada>=0){
           lblNuevaCampania.setText("Modificar datos de campaña:");
           controlaPanelNuevaCampania(true);
           campoBarcoCampania.setText((String)modeloTabla.getValueAt(filaSeleccionada, NRO_COL_BARCO));           
           campoCapitanCampania.setText((String)modeloTabla.getValueAt(filaSeleccionada, NRO_COL_CAPITAN));
           campoNombreCampania.setText((String)modeloTabla.getValueAt(filaSeleccionada, NRO_COL_NOMBRE_CAMP));
       }
    }

    /**
     * @return the modificandoCampania
     */
    public boolean isModificandoCampania() {
        return modificandoCampania;
    }

    /**
     * @param modificandoCampania the modificandoCampania to set
     */
    public void setModificandoCampania(boolean modificandoCampania) {
        this.modificandoCampania = modificandoCampania;
    }
    
    public void marcaCampaniaEnCurso(){
        boolean encontro=false;
        //recorre las campañas de la tabla y cuando encuentre una que no tiene fecha de fin,
        //será la campaña en curso, y en su fecha de fin le pondrá el texto que la distinga
        int i = 0;
        int idLeido;
        while ((i<modeloTabla.getRowCount()) && (!(encontro))){
            idLeido=(Integer)modeloTabla.getValueAt(i, NRO_COL_ID_CAMP);
            if (idLeido == ControllerCampania.getInstance().getIdCampaniaEnCurso()){
                encontro = true;
            }
            else
            {   i++;  }
        }
        if (encontro) {
            modeloTabla.setValueAt("EN CURSO", i, NRO_COL_FECHA_FIN);
        }
    }

    private void cargarDatosDeCampaniaEnCurso() {
        if (getEstadoCampania() == 1){
            int idCampEnCurso = ControllerCampania.getInstance().getIdCampaniaEnCurso();
            if (idCampEnCurso>=0){
                modelo.dataManager.Campania campania = modelo.dataManager.AdministraCampanias.getInstance().getCampaniaEnCurso();
                campoBarcoCampania.setText(campania.getBarco());
                campoBarcoCampania.setEnabled(false);
                campoCapitanCampania.setText(campania.getCapitan());
                campoCapitanCampania.setEnabled(false);
                campoNombreCampania.setText(campania.getDescripcion());
                campoNombreCampania.setEnabled(false);
            }
        }
        else{
            campoBarcoCampania.setText("");
            campoCapitanCampania.setText("");
            campoNombreCampania.setText("");
        }
        
    }

    private boolean guardarCampaniaModificada() {
        boolean sePudo=false;
        if (getIdDeCampaniaSeleccionada()>=0){
            
            if (validaCampos()){
                ControllerCampania.getInstance().modificarCampania(
                        getIdDeCampaniaSeleccionada(), 
                        campoNombreCampania.getText(), 
                        campoCapitanCampania.getText(), 
                        campoBarcoCampania.getText());
                JOptionPane.showMessageDialog(null, "Cambios guardardos!");                
                sePudo=true;
            }            
        }        
        return sePudo;
    }

    private boolean validaCampos() {
        boolean camposRequeridos = campoBarcoCampania.getText().length() > 2 && 
                campoCapitanCampania.getText().length() > 2  &&
                campoNombreCampania.getText().length() > 2;
        if (!(camposRequeridos)){
            JOptionPane.showMessageDialog(null, "Error! Ha ingresado valores invalidos");
        }
        return camposRequeridos;
    }

    private void cargaIconosDeBotones() {
        btnGuardar.setIcon(new javax.swing.ImageIcon("imgs//iconos//tabla-icono-guardar.png"));
        btnModificar.setIcon(new javax.swing.ImageIcon("imgs//iconos//tabla-icono-editar.png"));
        btnEliminar.setIcon(new javax.swing.ImageIcon("imgs//iconos//tabla-icono-eliminar.png"));
    }
    
    public JCheckBox getChkHistoricoGpsSonda() {
        return chkHistoricoGpsSonda;
    }

    public void setChkHistoricoGpsSonda(JCheckBox chkHistoricoGps) {
        this.chkHistoricoGpsSonda = chkHistoricoGps;
    }

    public JCheckBox getChkHistoricoPeces() {
        return chkHistoricoPeces;
    }

    public void setChkHistoricoPeces(JCheckBox chkHistoricoPeces) {
        this.chkHistoricoPeces = chkHistoricoPeces;
    }

    public JCheckBox getChkHistoricoSondaSets() {
        return chkHistoricoSondaSets;
    }

    public void setChkHistoricoSondaSets(JCheckBox chkHistoricoSondaSets) {
        this.chkHistoricoSondaSets = chkHistoricoSondaSets;
    }    
    
    public void clickEnChkHistoricoGpsSonda(){
        if (chkHistoricoGpsSonda.isSelected()) {
            chkHistoricoGpsSonda.setSelected(true);
            chkHistoricoSondaSets.setEnabled(true);
            chkHistoricoPeces.setEnabled(true);
        }
        else
        {   
            chkHistoricoGpsSonda.setSelected(false);
            chkHistoricoSondaSets.setEnabled(false);
            chkHistoricoPeces.setEnabled(false);        
        }        
    }

    private void setGuiHistoricoLogueando(boolean estado) {
        btnDetenerLogueoHistorico.setVisible(estado);
        btnIniciarLogueoHistorico.setVisible(!(estado));
        chkHistoricoGpsSonda.setEnabled(!(estado));
        chkHistoricoPeces.setEnabled(!(estado));
        chkHistoricoSondaSets.setEnabled(!(estado));
    }
    
    
}