/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import com.sun.script.javascript.JSAdapter;
import controllers.ControllerNavegacion;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JSplitPane;
import modelo.dataManager.AdministraCampanias;
import modelo.dataManager.UltimaImgProcesada;
import persistencia.Logueador;

/**
 *
 * @author Sebastian
 */
public class ProcesaImgWin extends javax.swing.JFrame {
    private static ProcesaImgWin unicaInstancia;
    
    /**
     * Creates new form ProcesaImgWin
     */
    private ProcesaImgWin() {
        initComponents();
        inicializador();
    }

    public static ProcesaImgWin getInstance() {
        if (unicaInstancia == null) {
            unicaInstancia = new ProcesaImgWin();
        }
        return unicaInstancia;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelSuperior = new org.jdesktop.swingx.JXPanel();
        lblTitulo = new org.jdesktop.swingx.JXLabel();
        panelCentro = new org.jdesktop.swingx.JXPanel();
        splitPanelPdi = new javax.swing.JSplitPane();
        imgSinProcesar = new javax.swing.JLabel();
        imgProcesada = new javax.swing.JLabel();
        panelInferior = new org.jdesktop.swingx.JXPanel();

        setName("ProcesaImgWin"); // NOI18N

        panelSuperior.setPreferredSize(new java.awt.Dimension(700, 30));

        lblTitulo.setText("Procesamiento de Imagenes");
        lblTitulo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        panelSuperior.add(lblTitulo);

        getContentPane().add(panelSuperior, java.awt.BorderLayout.NORTH);

        panelCentro.setPreferredSize(new java.awt.Dimension(700, 620));
        panelCentro.setLayout(new java.awt.BorderLayout());

        splitPanelPdi.setDividerLocation(300);
        splitPanelPdi.setDividerSize(8);
        splitPanelPdi.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitPanelPdi.setContinuousLayout(true);
        splitPanelPdi.setOneTouchExpandable(true);
        splitPanelPdi.setPreferredSize(new java.awt.Dimension(520, 600));

        imgSinProcesar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        imgSinProcesar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/imgNotProcessedFill.jpg"))); // NOI18N
        imgSinProcesar.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        splitPanelPdi.setLeftComponent(imgSinProcesar);

        imgProcesada.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        imgProcesada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/imgProcessedFill.jpg"))); // NOI18N
        splitPanelPdi.setRightComponent(imgProcesada);

        panelCentro.add(splitPanelPdi, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelCentro, java.awt.BorderLayout.CENTER);

        panelInferior.setPreferredSize(new java.awt.Dimension(700, 50));
        getContentPane().add(panelInferior, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imgProcesada;
    private javax.swing.JLabel imgSinProcesar;
    private org.jdesktop.swingx.JXLabel lblTitulo;
    private org.jdesktop.swingx.JXPanel panelCentro;
    private org.jdesktop.swingx.JXPanel panelInferior;
    private org.jdesktop.swingx.JXPanel panelSuperior;
    private javax.swing.JSplitPane splitPanelPdi;
    // End of variables declaration//GEN-END:variables

    private void inicializador() {
        setImgOnImgProcesadaLabel("/imgs/imgProcessedFill.jpg", 520, 580);
        setImgOnImgSinProcesarLabel("/imgs/imgNotProcessedFill.jpg", 520, 580);

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent evt) {
                mostrarVentana(false);
            } 
        });
        //cargo el icono de la aplicacion
        java.net.URL imgURL = getClass().getResource("/imgs/iconoIbape32x32.png");
        Image icon = Toolkit.getDefaultToolkit().getImage(imgURL);
        setIconImage(icon);
        setTitle("IBAPE - Detecci√≥n de peces");//titulo del frame
    }
    
    public void mostrarVentana(boolean estado){
        this.setVisible(estado);
    }
    
    public void actualizaImgs(String rutaImgSinProcesar,String rutaImgProcesada){
        try{
            if (rutaImgProcesada == null || rutaImgProcesada.length()<2){
                //rutaImgProcesada = "imgs\\"+modelo.dataCapture.Sistema.getInstance().getImgWithDetectedMarksFileName();
            }else{
                setImgOnImgProcesadaLabel(rutaImgProcesada, 600, 690);
            }
            if (rutaImgSinProcesar == null || rutaImgSinProcesar.length()<2){
                //rutaImgSinProcesar = AdministraCampanias.getInstance().getFullFolderHistoricoDeCampActual()
                //        +"\\"+UltimaImgProcesada.getInstance().getFileName();
            }else{
                setImgOnImgSinProcesarLabel(rutaImgSinProcesar, 600, 690); 
            }
        }catch(Exception e){
            Logueador.getInstance().agregaAlLog("actualizaImgs(): "+e.toString());
            setImgOnImgProcesadaLabel("/imgs/errorProcessing.jpg", 520, 580);
        }
    }
    
    private void setImgOnImgProcesadaLabel(String rutaImg, int anchoPretendido, int altoPretendido) {
        Image source = null;
        if (!rutaImg.contains("/")){
            try{
                source = new ImageIcon(ImageIO.read(new File(rutaImg))).getImage();
            }catch(Exception e){
                Logueador.getInstance().agregaAlLog(("setImgOnImgProcesadaLabel(): "+e.toString()));
            }
        }else{
            source = new ImageIcon(getClass().getResource(rutaImg)).getImage();
        }
        //--- resize imgIcon
        BufferedImage image = null;
        if ((source != null) && (!(source.getWidth(null) == -1))){
            image = new BufferedImage(source.getWidth(null), source.getHeight(null), BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2d = (Graphics2D)image.getGraphics();
            g2d.drawImage(source, 0, 0, null);
            g2d.dispose();
            //-------------
            BufferedImage scaled = modelo.dataCapture.Sistema.getInstance().scaleImg(image, anchoPretendido, altoPretendido);
            imgProcesada.setIcon(new ImageIcon(scaled));
            imgProcesada.setPreferredSize(new Dimension(anchoPretendido, altoPretendido));      
            imgProcesada.setMinimumSize(new Dimension(0,0));
            imgProcesada.setHorizontalAlignment(JLabel.CENTER);
        }else{
            ControllerNavegacion.getInstance().errorGuiNotFoundImgProcesada();
        }
    }
    
    private void setImgOnImgSinProcesarLabel(String rutaImg, int anchoPretendido, int altoPretendido) {
        Image source = null;
        if (!rutaImg.contains("/")){
            try{
                source = new ImageIcon(ImageIO.read(new File(rutaImg))).getImage();
            }catch(Exception e){
                Logueador.getInstance().agregaAlLog(("setImgOnImgSinProcesarLabel(): "+e.toString()));
            }
        }else{
            source = new ImageIcon(getClass().getResource(rutaImg)).getImage();
        }
        //--- resize imgIcon
        BufferedImage image = null;
        if (!(source.getWidth(null) == -1)){
            image = new BufferedImage(source.getWidth(null), source.getHeight(null), BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2d = (Graphics2D)image.getGraphics();
            g2d.drawImage(source, 0, 0, null);
            g2d.dispose();
            //-------------
            BufferedImage scaled = modelo.dataCapture.Sistema.getInstance().scaleImg(image, anchoPretendido, altoPretendido);
            imgSinProcesar.setIcon(new ImageIcon(scaled));
            imgSinProcesar.setPreferredSize(new Dimension(anchoPretendido, altoPretendido));      
            imgSinProcesar.setMinimumSize(new Dimension(0,0));
            imgSinProcesar.setHorizontalAlignment(JLabel.CENTER);
        }else{
            ControllerNavegacion.getInstance().errorGuiNotFoundImgSinProcesar();
        }
    }

    public void setLoadingOnImgSinProcesar(String rutaImg) {
        ImageIcon source = null;
        source = new ImageIcon(getClass().getResource(rutaImg));
        BufferedImage image = null;
        if (!(source.getIconWidth() == -1)){
            imgSinProcesar.setIcon(source);
            imgSinProcesar.setMinimumSize(new Dimension(0,0));
        }else{
            ControllerNavegacion.getInstance().errorGuiNotFoundImgProcesada();
        }
    }
    
    public void setLoadingOnImgProcesada(String rutaImg) {
        ImageIcon source = null;
        source = new ImageIcon(getClass().getResource(rutaImg));
        BufferedImage image = null;
        if (!(source.getIconWidth() == -1)){
            imgProcesada.setIcon(source);
            imgProcesada.setMinimumSize(new Dimension(0,0));
        }else{
            ControllerNavegacion.getInstance().errorGuiNotFoundImgProcesada();
        }
    }
    
    
}