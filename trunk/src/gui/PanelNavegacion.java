/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelNavegacion.java
 *
 * Created on 07/04/2012, 21:41:55
 */
package gui;

import controllers.ControllerCampania;
import controllers.ControllerNavegacion;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import modelo.dataManager.Punto;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Observable;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import modelo.dataManager.CategoriaPoi;



/**
 *
 * @author Sebastian
 */
public class PanelNavegacion extends javax.swing.JPanel implements java.util.Observer {
    static PanelNavegacion unicaInstancia;
    private Punto punto = Punto.getInstance();
    private DefaultTableModel modeloTablaDC;    
    private int NRO_COL_ID_MARCA;
    private int NRO_COL_FECHAYHORA;
    private int NRO_COL_LATITUD;
    private int NRO_COL_LONGITUD;
    private int NRO_COL_PROFUNDIDAD;
    private int NRO_COL_IMGFILENAME;
    private int NRO_COL_TAMANIOPX;
    private ArrayList<Integer> categoriasSeleccionadas=new ArrayList();
    private String txtBtnGraficarDatos;
    private int cantMarcasEncontradas;
    
    /** Creates new form PanelNavegacion */
    private PanelNavegacion() {
        initComponents();
        inicializador();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTitulo = new org.jdesktop.swingx.JXPanel();
        lblTituloNavegacion = new org.jdesktop.swingx.JXLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        panelTodo = new org.jdesktop.swingx.JXPanel();
        panelDatosNavegacion = new javax.swing.JPanel();
        panelTituloDatos = new javax.swing.JPanel();
        lblDatosNavegacion = new java.awt.Label();
        panelDatos = new javax.swing.JPanel();
        panelGps = new javax.swing.JPanel();
        lblTxtLatitud = new java.awt.Label();
        lblLatitud = new java.awt.Label();
        lblTxtLongitud = new java.awt.Label();
        lblLongitud = new java.awt.Label();
        lblTxtRumbo = new java.awt.Label();
        lblRumbo = new java.awt.Label();
        panelSonda = new javax.swing.JPanel();
        lblTxtVelocidad = new java.awt.Label();
        lblVelocidad = new java.awt.Label();
        lblTxtTemp = new java.awt.Label();
        lblTemp = new java.awt.Label();
        lblTxtProf = new java.awt.Label();
        lblProf = new java.awt.Label();
        panelRelleno1 = new javax.swing.JPanel();
        panelRelleno2 = new javax.swing.JPanel();
        panelDeteccionCardumenes = new javax.swing.JPanel();
        panelTituloDC = new javax.swing.JPanel();
        lblTituloDC = new org.jdesktop.swingx.JXLabel();
        btnProcesaImg = new javax.swing.JButton();
        panelDatosDC = new org.jdesktop.swingx.JXPanel();
        scrollTablaMarcas = new javax.swing.JScrollPane();
        tablaMarcas = new org.jdesktop.swingx.JXTable();
        panelCantMarcas = new org.jdesktop.swingx.JXPanel();
        lblTxtCantMarcas = new org.jdesktop.swingx.JXLabel();
        lblCantMarcas = new org.jdesktop.swingx.JXLabel();
        panelMapa = new org.jdesktop.swingx.JXPanel();
        panelSeparador = new javax.swing.JPanel();
        panelTituloMapa = new javax.swing.JPanel();
        lblTitulo = new java.awt.Label();
        panelDatosMapa = new javax.swing.JPanel();
        lblTxtDatosMapa = new java.awt.Label();
        panelRecorrido = new org.jdesktop.swingx.JXPanel();
        chkRecorrido = new javax.swing.JCheckBox();
        lblCantPuntosRecorrido = new org.jdesktop.swingx.JXLabel();
        chkConCamara = new javax.swing.JCheckBox();
        chkPoisTodos = new javax.swing.JCheckBox();
        lblTxtTablaCatPois = new java.awt.Label();
        panelTablaPOIs = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaCatPois = new org.jdesktop.swingx.JXTable();
        panelBtnActualizaMapa = new org.jdesktop.swingx.JXPanel();
        panelBtnActualizar = new javax.swing.JPanel();
        btnGraficarDatos = new javax.swing.JButton();
        btnIniciarMapaNav = new javax.swing.JButton();
        btnDetenerMapaNav = new javax.swing.JButton();
        btnAbrirBrowser = new org.jdesktop.swingx.JXHyperlink();

        setMaximumSize(new java.awt.Dimension(500, 500));
        setPreferredSize(new java.awt.Dimension(500, 500));
        setLayout(new java.awt.BorderLayout());

        panelTitulo.setMaximumSize(new java.awt.Dimension(480, 50));
        panelTitulo.setMinimumSize(new java.awt.Dimension(480, 50));
        panelTitulo.setPreferredSize(new java.awt.Dimension(480, 50));
        panelTitulo.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        lblTituloNavegacion.setText("Navegaci√≥n");
        lblTituloNavegacion.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblTituloNavegacion.setOpaque(true);
        panelTitulo.add(lblTituloNavegacion);

        add(panelTitulo, java.awt.BorderLayout.NORTH);

        jScrollPane2.setMaximumSize(new java.awt.Dimension(500, 450));
        jScrollPane2.setMinimumSize(new java.awt.Dimension(500, 450));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(500, 450));

        panelTodo.setMaximumSize(new java.awt.Dimension(480, 910));
        panelTodo.setMinimumSize(new java.awt.Dimension(480, 850));
        panelTodo.setOpaque(false);
        panelTodo.setPreferredSize(new java.awt.Dimension(480, 850));
        panelTodo.setScrollableTracksViewportHeight(false);
        panelTodo.setScrollableTracksViewportWidth(false);
        panelTodo.setLayout(new javax.swing.BoxLayout(panelTodo, javax.swing.BoxLayout.PAGE_AXIS));

        panelDatosNavegacion.setMaximumSize(new java.awt.Dimension(500, 200));
        panelDatosNavegacion.setMinimumSize(new java.awt.Dimension(480, 200));
        panelDatosNavegacion.setOpaque(false);
        panelDatosNavegacion.setPreferredSize(new java.awt.Dimension(480, 200));
        panelDatosNavegacion.setLayout(new java.awt.BorderLayout());

        panelTituloDatos.setMaximumSize(new java.awt.Dimension(500, 30));
        panelTituloDatos.setMinimumSize(new java.awt.Dimension(480, 30));
        panelTituloDatos.setOpaque(false);
        panelTituloDatos.setPreferredSize(new java.awt.Dimension(480, 30));
        panelTituloDatos.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lblDatosNavegacion.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblDatosNavegacion.setText("Datos recibidos de los dispositivos:");
        panelTituloDatos.add(lblDatosNavegacion);

        panelDatosNavegacion.add(panelTituloDatos, java.awt.BorderLayout.NORTH);

        panelDatos.setMaximumSize(new java.awt.Dimension(500, 170));
        panelDatos.setMinimumSize(new java.awt.Dimension(480, 170));
        panelDatos.setOpaque(false);
        panelDatos.setPreferredSize(new java.awt.Dimension(480, 170));
        panelDatos.setLayout(new java.awt.GridLayout(1, 2));

        panelGps.setMaximumSize(new java.awt.Dimension(250, 220));
        panelGps.setMinimumSize(new java.awt.Dimension(240, 220));
        panelGps.setOpaque(false);
        panelGps.setPreferredSize(new java.awt.Dimension(240, 220));
        panelGps.setLayout(new java.awt.GridLayout(4, 2));

        lblTxtLatitud.setAlignment(java.awt.Label.RIGHT);
        lblTxtLatitud.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblTxtLatitud.setText("Latitud: ");
        panelGps.add(lblTxtLatitud);

        lblLatitud.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblLatitud.setText("---");
        panelGps.add(lblLatitud);

        lblTxtLongitud.setAlignment(java.awt.Label.RIGHT);
        lblTxtLongitud.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblTxtLongitud.setText("Longitud: ");
        panelGps.add(lblTxtLongitud);

        lblLongitud.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblLongitud.setText("---");
        panelGps.add(lblLongitud);

        lblTxtRumbo.setAlignment(java.awt.Label.RIGHT);
        lblTxtRumbo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblTxtRumbo.setText("Rumbo: ");
        panelGps.add(lblTxtRumbo);

        lblRumbo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblRumbo.setText("---");
        panelGps.add(lblRumbo);

        panelDatos.add(panelGps);

        panelSonda.setMaximumSize(new java.awt.Dimension(250, 220));
        panelSonda.setMinimumSize(new java.awt.Dimension(240, 220));
        panelSonda.setOpaque(false);
        panelSonda.setPreferredSize(new java.awt.Dimension(240, 220));
        panelSonda.setLayout(new java.awt.GridLayout(4, 2));

        lblTxtVelocidad.setAlignment(java.awt.Label.RIGHT);
        lblTxtVelocidad.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblTxtVelocidad.setText("Velocidad: ");
        panelSonda.add(lblTxtVelocidad);

        lblVelocidad.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblVelocidad.setText("---");
        panelSonda.add(lblVelocidad);

        lblTxtTemp.setAlignment(java.awt.Label.RIGHT);
        lblTxtTemp.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblTxtTemp.setText("Temperatura: ");
        panelSonda.add(lblTxtTemp);

        lblTemp.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblTemp.setText("---");
        panelSonda.add(lblTemp);

        lblTxtProf.setAlignment(java.awt.Label.RIGHT);
        lblTxtProf.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblTxtProf.setText("Profundidad: ");
        panelSonda.add(lblTxtProf);

        lblProf.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblProf.setText("---");
        panelSonda.add(lblProf);

        panelRelleno1.setOpaque(false);

        javax.swing.GroupLayout panelRelleno1Layout = new javax.swing.GroupLayout(panelRelleno1);
        panelRelleno1.setLayout(panelRelleno1Layout);
        panelRelleno1Layout.setHorizontalGroup(
            panelRelleno1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 120, Short.MAX_VALUE)
        );
        panelRelleno1Layout.setVerticalGroup(
            panelRelleno1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 42, Short.MAX_VALUE)
        );

        panelSonda.add(panelRelleno1);

        panelRelleno2.setOpaque(false);
        panelRelleno2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 5));
        panelSonda.add(panelRelleno2);

        panelDatos.add(panelSonda);

        panelDatosNavegacion.add(panelDatos, java.awt.BorderLayout.CENTER);

        panelTodo.add(panelDatosNavegacion);

        panelDeteccionCardumenes.setMaximumSize(new java.awt.Dimension(500, 250));
        panelDeteccionCardumenes.setMinimumSize(new java.awt.Dimension(480, 250));
        panelDeteccionCardumenes.setOpaque(false);
        panelDeteccionCardumenes.setPreferredSize(new java.awt.Dimension(480, 250));
        panelDeteccionCardumenes.setLayout(new java.awt.BorderLayout());

        panelTituloDC.setMaximumSize(new java.awt.Dimension(250, 250));
        panelTituloDC.setMinimumSize(new java.awt.Dimension(250, 250));
        panelTituloDC.setOpaque(false);
        panelTituloDC.setPreferredSize(new java.awt.Dimension(480, 30));

        lblTituloDC.setText("Resultados de la detecci√≥n de card√∫menes:");
        lblTituloDC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        panelTituloDC.add(lblTituloDC);

        btnProcesaImg.setText("Detecci√≥n de marcas");
        btnProcesaImg.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnProcesaImg.setMaximumSize(new java.awt.Dimension(195, 23));
        btnProcesaImg.setPreferredSize(new java.awt.Dimension(135, 23));
        btnProcesaImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcesaImgActionPerformed(evt);
            }
        });
        panelTituloDC.add(btnProcesaImg);

        panelDeteccionCardumenes.add(panelTituloDC, java.awt.BorderLayout.NORTH);

        panelDatosDC.setLayout(new java.awt.BorderLayout());

        tablaMarcas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollTablaMarcas.setViewportView(tablaMarcas);

        panelDatosDC.add(scrollTablaMarcas, java.awt.BorderLayout.CENTER);

        panelDeteccionCardumenes.add(panelDatosDC, java.awt.BorderLayout.CENTER);

        lblTxtCantMarcas.setText("Cantidad de marcas encontradas: ");
        lblTxtCantMarcas.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        panelCantMarcas.add(lblTxtCantMarcas);

        lblCantMarcas.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        panelCantMarcas.add(lblCantMarcas);

        panelDeteccionCardumenes.add(panelCantMarcas, java.awt.BorderLayout.PAGE_END);

        panelTodo.add(panelDeteccionCardumenes);

        panelMapa.setMinimumSize(new java.awt.Dimension(480, 400));
        panelMapa.setOpaque(false);
        panelMapa.setPreferredSize(new java.awt.Dimension(480, 400));
        panelMapa.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        panelSeparador.setMaximumSize(new java.awt.Dimension(500, 40));
        panelSeparador.setMinimumSize(new java.awt.Dimension(480, 20));
        panelSeparador.setOpaque(false);
        panelSeparador.setPreferredSize(new java.awt.Dimension(480, 20));
        panelSeparador.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 20));
        panelMapa.add(panelSeparador);

        panelTituloMapa.setMaximumSize(new java.awt.Dimension(500, 40));
        panelTituloMapa.setMinimumSize(new java.awt.Dimension(480, 40));
        panelTituloMapa.setOpaque(false);
        panelTituloMapa.setPreferredSize(new java.awt.Dimension(480, 40));

        lblTitulo.setAlignment(java.awt.Label.CENTER);
        lblTitulo.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblTitulo.setText("Mapa");
        panelTituloMapa.add(lblTitulo);

        panelMapa.add(panelTituloMapa);

        panelDatosMapa.setMaximumSize(new java.awt.Dimension(500, 130));
        panelDatosMapa.setMinimumSize(new java.awt.Dimension(480, 130));
        panelDatosMapa.setOpaque(false);
        panelDatosMapa.setPreferredSize(new java.awt.Dimension(480, 130));
        panelDatosMapa.setLayout(new java.awt.GridLayout(5, 1));

        lblTxtDatosMapa.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblTxtDatosMapa.setText(" Datos mostrados en el mapa:");
        panelDatosMapa.add(lblTxtDatosMapa);

        panelRecorrido.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 2));

        chkRecorrido.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkRecorrido.setText("Recorrido");
        chkRecorrido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRecorridoActionPerformed(evt);
            }
        });
        panelRecorrido.add(chkRecorrido);

        lblCantPuntosRecorrido.setForeground(new java.awt.Color(0, 204, 51));
        lblCantPuntosRecorrido.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        panelRecorrido.add(lblCantPuntosRecorrido);

        panelDatosMapa.add(panelRecorrido);

        chkConCamara.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkConCamara.setSelected(true);
        chkConCamara.setText("Mover c√°mara al √∫ltimo punto agregado");
        chkConCamara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkConCamaraActionPerformed(evt);
            }
        });
        panelDatosMapa.add(chkConCamara);

        chkPoisTodos.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkPoisTodos.setText("Puntos de Interes (POI)");
        chkPoisTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPoisTodosActionPerformed(evt);
            }
        });
        panelDatosMapa.add(chkPoisTodos);

        lblTxtTablaCatPois.setAlignment(java.awt.Label.CENTER);
        lblTxtTablaCatPois.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblTxtTablaCatPois.setText("Seleccione las categorias de POIs que desea ver en el mapa");
        panelDatosMapa.add(lblTxtTablaCatPois);

        panelMapa.add(panelDatosMapa);

        panelTablaPOIs.setMaximumSize(new java.awt.Dimension(500, 250));
        panelTablaPOIs.setMinimumSize(new java.awt.Dimension(480, 180));
        panelTablaPOIs.setOpaque(false);
        panelTablaPOIs.setPreferredSize(new java.awt.Dimension(480, 180));

        jScrollPane3.setMaximumSize(new java.awt.Dimension(500, 250));
        jScrollPane3.setMinimumSize(new java.awt.Dimension(480, 150));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(480, 150));

        tablaCatPois.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "", "Categorias de POIs"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tablaCatPois);
        tablaCatPois.getColumnModel().getColumn(0).setMinWidth(40);
        tablaCatPois.getColumnModel().getColumn(0).setPreferredWidth(40);
        tablaCatPois.getColumnModel().getColumn(0).setMaxWidth(40);

        panelTablaPOIs.add(jScrollPane3);

        panelMapa.add(panelTablaPOIs);

        panelBtnActualizaMapa.setMinimumSize(new java.awt.Dimension(480, 40));
        panelBtnActualizaMapa.setPreferredSize(new java.awt.Dimension(480, 40));
        panelMapa.add(panelBtnActualizaMapa);

        panelTodo.add(panelMapa);

        jScrollPane2.setViewportView(panelTodo);

        add(jScrollPane2, java.awt.BorderLayout.CENTER);

        panelBtnActualizar.setMaximumSize(new java.awt.Dimension(500, 40));
        panelBtnActualizar.setMinimumSize(new java.awt.Dimension(480, 40));
        panelBtnActualizar.setPreferredSize(new java.awt.Dimension(480, 40));

        btnGraficarDatos.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnGraficarDatos.setText("Graficar Datos");
        btnGraficarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraficarDatosActionPerformed(evt);
            }
        });
        panelBtnActualizar.add(btnGraficarDatos);

        btnIniciarMapaNav.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnIniciarMapaNav.setText("Iniciar Mapa Navegaci√≥n");
        btnIniciarMapaNav.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarMapaNavActionPerformed(evt);
            }
        });
        panelBtnActualizar.add(btnIniciarMapaNav);

        btnDetenerMapaNav.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDetenerMapaNav.setText("Detener Mapa Navegaci√≥n");
        btnDetenerMapaNav.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetenerMapaNavActionPerformed(evt);
            }
        });
        panelBtnActualizar.add(btnDetenerMapaNav);

        btnAbrirBrowser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/logoChome30x30.png"))); // NOI18N
        btnAbrirBrowser.setText("");
        btnAbrirBrowser.setToolTipText("Se recomienda visualizar el mapa con Google Chrome");
        btnAbrirBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirBrowserActionPerformed(evt);
            }
        });
        panelBtnActualizar.add(btnAbrirBrowser);

        add(panelBtnActualizar, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

private void btnIniciarMapaNavActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarMapaNavActionPerformed
    String txtOriginal = btnIniciarMapaNav.getText();
    btnIniciarMapaNav.setText("Abriendo...");
    btnIniciarMapaNav.setEnabled(false);
    if (!(controllers.ControllerNavegacion.getInstance().iniciaServerYabreBrowser())){
        JOptionPane.showMessageDialog(this, "Hubo un error al iniciar el Servidor Web √≥ el Navegador");
    }
    btnIniciarMapaNav.setText(txtOriginal);
    btnIniciarMapaNav.setEnabled(true);    
    btnIniciarMapaNav.setVisible(false);
    btnDetenerMapaNav.setVisible(true);
}//GEN-LAST:event_btnIniciarMapaNavActionPerformed

private void btnDetenerMapaNavActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetenerMapaNavActionPerformed
    String txtOriginal = btnDetenerMapaNav.getText();
    btnDetenerMapaNav.setText("Cerrando...");
    btnDetenerMapaNav.setEnabled(false);
    if (!(controllers.ControllerNavegacion.getInstance().detieneServerYcierraBrowser())){
        JOptionPane.showMessageDialog(this, "Hubo un error al detener el Servidor Web o el Navegador");
    }    
    btnDetenerMapaNav.setText(txtOriginal);
    btnDetenerMapaNav.setEnabled(true);    
    btnDetenerMapaNav.setVisible(false);
    btnIniciarMapaNav.setVisible(true);    
}//GEN-LAST:event_btnDetenerMapaNavActionPerformed

private void chkConCamaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkConCamaraActionPerformed
    if (chkConCamara.isSelected()){
        persistencia.BrokerDbMapa.getInstance().setConCamara(true);
    }
    else
      {  persistencia.BrokerDbMapa.getInstance().setConCamara(false);   }
}//GEN-LAST:event_chkConCamaraActionPerformed

    private void btnGraficarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraficarDatosActionPerformed
        if (ControllerCampania.getInstance().getIdCampaniaEnCurso()>=0){
            if (getChkRecorrido().isSelected() || (getChkPoisTodos().isSelected() && getCategoriasSeleccionadas().size()>0) ){                
                setTxtBtnGraficarDatos(btnGraficarDatos.getText());
                btnGraficarDatos.setText("Transfiriendo datos...");
                habilitaBtnGraficarDatos(false);
                int retardo= 0; //sin retardo
                if (btnIniciarMapaNav.isEnabled() && btnIniciarMapaNav.isVisible()){
                    btnIniciarMapaNavActionPerformed(null);//si no se ha hecho click en iniciar Mapa historico previamente, lo hago
                    retardo=5000;//5 segundos de retardo para graficar xq estba el webserver cerrado
                }
                else{
                    retardo=4000;//4 segundos de retardo para que lea la DB el browser
                }
                ControllerNavegacion.getInstance().graficarDatos(retardo);
            }
            else{
                JOptionPane.showMessageDialog(null, "No ha elegido que datos de la campa√±a en curso desea graficar");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "No hay ninguna campa√±a en curso. Inicie una");
        }
    }//GEN-LAST:event_btnGraficarDatosActionPerformed

    private void chkRecorridoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRecorridoActionPerformed
        if (getChkRecorrido().isSelected()){
            habilitaBtnGraficarDatos(true);
        }
        else{
            if (!chkPoisTodos.isSelected()){
                habilitaBtnGraficarDatos(false);
            }
        }
    }//GEN-LAST:event_chkRecorridoActionPerformed

    private void chkPoisTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPoisTodosActionPerformed
        if ((getChkPoisTodos().isSelected()) || (getChkRecorrido().isSelected())){
            habilitaBtnGraficarDatos(true);
        }
        else{
            habilitaBtnGraficarDatos(false);
        }
        if (getChkPoisTodos().isSelected()){
            habilitaPanelTablaCatPois(true);            
        }
        else{
            habilitaPanelTablaCatPois(false);
        }
    }//GEN-LAST:event_chkPoisTodosActionPerformed

    private void btnProcesaImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcesaImgActionPerformed
        ProcesaImgWin.getInstance().mostrarVentana(true);
    }//GEN-LAST:event_btnProcesaImgActionPerformed

    private void btnAbrirBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirBrowserActionPerformed
        ControllerNavegacion.getInstance().abreBrowserConMapaNavegacion();
    }//GEN-LAST:event_btnAbrirBrowserActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXHyperlink btnAbrirBrowser;
    private javax.swing.JButton btnDetenerMapaNav;
    private javax.swing.JButton btnGraficarDatos;
    private javax.swing.JButton btnIniciarMapaNav;
    private javax.swing.JButton btnProcesaImg;
    private javax.swing.JCheckBox chkConCamara;
    private javax.swing.JCheckBox chkPoisTodos;
    private javax.swing.JCheckBox chkRecorrido;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private org.jdesktop.swingx.JXLabel lblCantMarcas;
    private org.jdesktop.swingx.JXLabel lblCantPuntosRecorrido;
    private java.awt.Label lblDatosNavegacion;
    private java.awt.Label lblLatitud;
    private java.awt.Label lblLongitud;
    private java.awt.Label lblProf;
    private java.awt.Label lblRumbo;
    private java.awt.Label lblTemp;
    private java.awt.Label lblTitulo;
    private org.jdesktop.swingx.JXLabel lblTituloDC;
    private org.jdesktop.swingx.JXLabel lblTituloNavegacion;
    private org.jdesktop.swingx.JXLabel lblTxtCantMarcas;
    private java.awt.Label lblTxtDatosMapa;
    private java.awt.Label lblTxtLatitud;
    private java.awt.Label lblTxtLongitud;
    private java.awt.Label lblTxtProf;
    private java.awt.Label lblTxtRumbo;
    private java.awt.Label lblTxtTablaCatPois;
    private java.awt.Label lblTxtTemp;
    private java.awt.Label lblTxtVelocidad;
    private java.awt.Label lblVelocidad;
    private org.jdesktop.swingx.JXPanel panelBtnActualizaMapa;
    private javax.swing.JPanel panelBtnActualizar;
    private org.jdesktop.swingx.JXPanel panelCantMarcas;
    private javax.swing.JPanel panelDatos;
    private org.jdesktop.swingx.JXPanel panelDatosDC;
    private javax.swing.JPanel panelDatosMapa;
    private javax.swing.JPanel panelDatosNavegacion;
    private javax.swing.JPanel panelDeteccionCardumenes;
    private javax.swing.JPanel panelGps;
    private org.jdesktop.swingx.JXPanel panelMapa;
    private org.jdesktop.swingx.JXPanel panelRecorrido;
    private javax.swing.JPanel panelRelleno1;
    private javax.swing.JPanel panelRelleno2;
    private javax.swing.JPanel panelSeparador;
    private javax.swing.JPanel panelSonda;
    private javax.swing.JPanel panelTablaPOIs;
    private org.jdesktop.swingx.JXPanel panelTitulo;
    private javax.swing.JPanel panelTituloDC;
    private javax.swing.JPanel panelTituloDatos;
    private javax.swing.JPanel panelTituloMapa;
    private org.jdesktop.swingx.JXPanel panelTodo;
    private javax.swing.JScrollPane scrollTablaMarcas;
    private org.jdesktop.swingx.JXTable tablaCatPois;
    private org.jdesktop.swingx.JXTable tablaMarcas;
    // End of variables declaration//GEN-END:variables
 
    public static PanelNavegacion getInstance() {
       if (unicaInstancia == null) {
          unicaInstancia = new PanelNavegacion();          
       }
       return unicaInstancia;
    }        
     
  @Override
  public void update(Observable obs, Object arg){
      modelo.dataManager.Punto p = modelo.dataManager.Punto.getInstance();
      if (obs == p){
          //lblFechaHora.setText(p.getFechaYhora().toString());
          lblLatitud.setText(p.getLatitud() + p.getLatHemisf());
          lblLongitud.setText(p.getLongitud() + p.getLonHemisf());
          lblProf.setText(String.valueOf(p.getProfundidad()));
          lblRumbo.setText(String.valueOf(p.getRumbo()));
          lblTemp.setText(String.valueOf(p.getTempAgua()));
          lblVelocidad.setText(String.valueOf(p.getVelocidad()));
      }
  }
  
    public void seteaBotonesMapa() {
        if (modelo.gisModule.WebServer.getInstance().isWebServerEncendido()){
            btnDetenerMapaNav.setVisible(true);
            btnIniciarMapaNav.setVisible(false);
        }
        else{
            btnDetenerMapaNav.setVisible(false);
            btnIniciarMapaNav.setVisible(true);            
        }
    }
  
    public void inicializaTablaCategoriasPois() {
        if (controllers.ControllerCampania.getInstance().getIdCampaniaEnCurso()>=0){
            TableModelCatPoisHistorico tableModelCatPois = (TableModelCatPoisHistorico)cargaGrillaCategoriaPOIS();        
            tablaCatPois.setModel(tableModelCatPois);
            //resize la columna Elejir
            tablaCatPois.getColumnModel().getColumn(1).setMinWidth(30); 
            tablaCatPois.getColumnModel().getColumn(1).setMaxWidth(30); 
            tablaCatPois.getColumnModel().getColumn(1).setPreferredWidth(30); 
            tablaCatPois.getColumnModel().getColumn(1).setResizable(false);
            //escondo la columna Iconos
            tablaCatPois.getColumnModel().getColumn(2).setMinWidth(33); 
            tablaCatPois.getColumnModel().getColumn(2).setMaxWidth(33); 
            tablaCatPois.getColumnModel().getColumn(2).setPreferredWidth(33);
            tablaCatPois.getColumnModel().getColumn(2).setResizable(true);
            tablaCatPois.getColumnModel().getColumn(2).setCellRenderer(new IconRenderer());
            //seteo los checkboxes
            tablaCatPois.getColumn(1).setCellRenderer((TableCellRenderer)new CheckBoxRenderer());
            tablaCatPois.getColumn(1).setCellEditor(new CheckBoxEditorNavegacion(new JCheckBox()));
            //ajusto la columna de cantidad de puntos
            tablaCatPois.getColumnModel().getColumn(4).setMaxWidth(30);
            tablaCatPois.getColumnModel().getColumn(4).setMinWidth(30); 
            tablaCatPois.getColumnModel().getColumn(4).setPreferredWidth(30); 
            
            habilitaBtnGraficarDatos(false); 
            getChkPoisTodos().setSelected(false);
            getChkRecorrido().setSelected(false);
            if (tableModelCatPois.getRowCount()==0){            
                tableModelCatPois.addRow(new Object[]{-1,new JCheckBox(),new JLabel(),"No se encontraron POIs para la campa√±a seleccionada..."});
                habilitaChkTodosLosPois(false);
                //escondo la columna de cantidad de puntos
                tablaCatPois.getColumnModel().getColumn(4).setMaxWidth(0); 
                tablaCatPois.getColumnModel().getColumn(4).setMinWidth(0); 
                tablaCatPois.getColumnModel().getColumn(4).setPreferredWidth(0);
                //escondo la columna Iconos
                tablaCatPois.getColumnModel().getColumn(2).setMinWidth(0); 
                tablaCatPois.getColumnModel().getColumn(2).setMaxWidth(0); 
                tablaCatPois.getColumnModel().getColumn(2).setPreferredWidth(0);

                //habilitaPanelTablaCatPois(false);
                //habilitaBtnGraficarDatos(false);
            }
            else{
                habilitaChkTodosLosPois(true);
                //habilitaPanelTablaCatPois(true);
                //habilitaBtnGraficarDatos(true);
            }
        }
        else{
                //escondo la columna ELEJIR
                tablaCatPois.getColumnModel().getColumn(1).setMinWidth(0); 
                tablaCatPois.getColumnModel().getColumn(1).setMaxWidth(0); 
                tablaCatPois.getColumnModel().getColumn(1).setPreferredWidth(0); 
                tablaCatPois.getColumnModel().getColumn(1).setResizable(false);
                DefaultTableModel modelo = (DefaultTableModel)tablaCatPois.getModel();
                modelo.setRowCount(0);//vac√≠o la tabla de categorias de POis
                setCategoriasSeleccionadas(new ArrayList()); //inicializo el vector de categorias seleccionadas                
                modelo.addRow(new Object[]{-1,new JCheckBox(),new JLabel(),"No se ha seleccionado ninguna campa√±a..."});
                tablaCatPois.setModel(modelo); 
                habilitaChkTodosLosPois(false);
        }
        //escondo la columna ID 
        tablaCatPois.getColumnModel().getColumn(0).setMinWidth(0); 
        tablaCatPois.getColumnModel().getColumn(0).setMaxWidth(0); 
        tablaCatPois.getColumnModel().getColumn(0).setPreferredWidth(0); 
        tablaCatPois.getColumnModel().getColumn(0).setResizable(false);        
  }

    public TableModel cargaGrillaCategoriaPOIS() {
        setCategoriasSeleccionadas(new ArrayList()); //inicializo en vac√≠o el vector de categorias seleccionadas
        TableModelCatPoisHistorico dm = new TableModelCatPoisHistorico();
        //Cabecera
        String[] encabezado = new String[5];
        encabezado[0] = "Id";
        encabezado[1] = "Elejir";        
        encabezado[2] = "Icono";
        encabezado[3] = "Nombre de la categoria";
        encabezado[4] = "#Puntos";
        dm.setColumnIdentifiers(encabezado);
        //Cuerpo
        for (CategoriaPoi cP : controllers.ControllerHistorico.getInstance().getCatPOISDeUnaCampFromDB(
                modelo.dataManager.AdministraCampanias.getInstance().getCampaniaEnCurso().getId())) {
            Object[] fila = new Object[5]; //creamos la fila
            fila[0]=cP.getId(); //en la columna 0 va el ID
            fila[1]=new JCheckBox(); //en la columna 1 va el CheckBox
            if (modelo.dataCapture.Sistema.getInstance().pathIconoEsValido(cP.getPathIcono())){
                //fila[2]=new JLabel(new ImageIcon(Sistema.getInstance().getRutaIconosCatPois()+cP.getPathIcono()));//en la columna 2 va el Icono
                //--- resize Icon
                Image source = new ImageIcon(modelo.dataCapture.Sistema.getInstance().getRutaIconosCatPois()+cP.getPathIcono()).getImage();
                BufferedImage image = new BufferedImage(source.getWidth(null), source.getHeight(null), BufferedImage.TYPE_INT_ARGB);
                Graphics2D g2d = (Graphics2D)image.getGraphics();
                g2d.drawImage(source, 0, 0, null);
                g2d.dispose();
                //-------------
                fila[2]=modelo.dataCapture.Sistema.getInstance().getLabelWithImgResized(25, 32, image);//en la columna 2 va el Icono
            }
            else{
                JLabel lblSinIcono = new JLabel("No Icon");
                lblSinIcono.setFont(new Font("Arial", Font.PLAIN, 8));
                fila[2]=lblSinIcono;
            }
            fila[3]=cP.getTitulo();//en la columna 3 va el Nombre de la categoria de POI 
            fila[4]=controllers.ControllerHistorico.getInstance().getCantPOISDeUnaCampSegunCatPoi(
                    modelo.dataManager.AdministraCampanias.getInstance().getCampaniaEnCurso().getId(),cP.getId());
            dm.addRow(fila);
        }
        return dm;
    }

    /**
     * @return the categoriasSeleccionadas
     */
    public ArrayList<Integer> getCategoriasSeleccionadas() {
        return categoriasSeleccionadas;
    }

    /**
     * @param categoriasSeleccionadas the categoriasSeleccionadas to set
     */
    public void setCategoriasSeleccionadas(ArrayList<Integer> categoriasSeleccionadas) {
        this.categoriasSeleccionadas = categoriasSeleccionadas;
    }

    public Integer getIdCatPoiFromRow(int row) {
        int idSeleccionado=-1;
        if (row>=0){
            idSeleccionado = Integer.parseInt(tablaCatPois.getModel().getValueAt(row, 0).toString());
        }
        return idSeleccionado;
    }

    private void setTxtCantidadDePuntos(int cantPuntos) {
        if (cantPuntos>=0){
            lblCantPuntosRecorrido.setText("Recorrido compuesto por "+cantPuntos+" puntos");
        }
        else{
            lblCantPuntosRecorrido.setText("");
        }
    }
    
    /**
     * @return the chkRecorrido
     */
    public javax.swing.JCheckBox getChkRecorrido() {
        return chkRecorrido;
    }

    /**
     * @param chkRecorrido the chkRecorrido to set
     */
    public void setChkRecorrido(javax.swing.JCheckBox chkRecorrido) {
        this.chkRecorrido = chkRecorrido;
    }

    public void habilitaPanelTablaCatPois(boolean estado){
        lblTxtTablaCatPois.setEnabled(estado);
        tablaCatPois.setEnabled(estado);
    }

    public void habilitaChkTodosLosPois(boolean estado){
        getChkPoisTodos().setEnabled(estado);
    }

    public void habilitaChkRecorrido(boolean estado){
            getChkRecorrido().setEnabled(estado);
    }

    public void habilitaBtnGraficarDatos(boolean estado){
        btnGraficarDatos.setEnabled(estado);
    }

    public void restauraBtnGraficarDatos() {
        btnGraficarDatos.setText(getTxtBtnGraficarDatos());
        habilitaBtnGraficarDatos(true);
    }

    /**
     * @return the txtBtnGraficarDatos
     */
    public String getTxtBtnGraficarDatos() {
        return txtBtnGraficarDatos;
    }

    /**
     * @param txtBtnGraficarDatos the txtBtnGraficarDatos to set
     */
    public void setTxtBtnGraficarDatos(String txtBtnGraficarDatos) {
        this.txtBtnGraficarDatos = txtBtnGraficarDatos;
    }

    private void inicializador() {
        habilitaPanelTablaCatPois(false);
        habilitaPanelCantMarcas(false);
        seteaBotonesMapa();
        tablaCatPois.setRowHeight(30);
        chkConCamaraActionPerformed(null);
        punto.addObserver(this);
        NRO_COL_ID_MARCA = 0;
        NRO_COL_FECHAYHORA = 1;
        NRO_COL_LATITUD = 2;
        NRO_COL_LONGITUD = 3;
        NRO_COL_PROFUNDIDAD = 4;
        NRO_COL_IMGFILENAME = 5;
        NRO_COL_TAMANIOPX = 6;
        tablaMarcas.setRowHeight(20);
        inicializaTablaDC();
    }

    public void agregaUnaMarca(int id, Date fechaYhora, double latitud, 
            double longitud, double profundidad, String imgFileName, int cantPx) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        DecimalFormat formatter = new DecimalFormat( "#.00000000" );
        Object[] fila = new Object[7]; //creamos la fila cantColumnas=6
        fila[NRO_COL_ID_MARCA]=id;
        if (fechaYhora != null) { fila[NRO_COL_FECHAYHORA]=sdf.format(fechaYhora); }
        fila[NRO_COL_LATITUD]=formatter.format((Number)latitud);
        fila[NRO_COL_LONGITUD]=formatter.format((Number)longitud);
        fila[NRO_COL_PROFUNDIDAD]=profundidad;
        fila[NRO_COL_IMGFILENAME]=imgFileName;
        fila[NRO_COL_TAMANIOPX]=cantPx;
        modeloTablaDC.addRow(fila);
    }

    public void vaciaTablaDC() {
        modeloTablaDC.setRowCount(0);
    }    
    
  public void inicializaTablaDC() {
        modeloTablaDC = new TableModelMarcasNavegacion();
        tablaMarcas.setModel(new DefaultTableModel());
        tablaMarcas.setModel(modeloTablaDC);
        tablaMarcas.setEnabled(true);
        //escondo la columna ID 
        tablaMarcas.getColumnModel().getColumn(NRO_COL_ID_MARCA).setMinWidth(0);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_ID_MARCA).setMaxWidth(0);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_ID_MARCA).setPreferredWidth(0);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_ID_MARCA).setResizable(false);
        //escondo la columna Profundidad de marca, xq por ahora no es posible determinarla
        tablaMarcas.getColumnModel().getColumn(NRO_COL_PROFUNDIDAD).setMinWidth(0);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_PROFUNDIDAD).setMaxWidth(0);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_PROFUNDIDAD).setPreferredWidth(0);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_PROFUNDIDAD).setResizable(false);
        //resize de las demas columnas
        tablaMarcas.getColumnModel().getColumn(NRO_COL_FECHAYHORA).setMinWidth(10);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_FECHAYHORA).setMaxWidth(200);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_FECHAYHORA).setPreferredWidth(70);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_FECHAYHORA).setResizable(true);

        tablaMarcas.getColumnModel().getColumn(NRO_COL_LATITUD).setMinWidth(10);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_LATITUD).setMaxWidth(200);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_LATITUD).setPreferredWidth(30);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_LATITUD).setResizable(true);

        tablaMarcas.getColumnModel().getColumn(NRO_COL_LONGITUD).setMinWidth(10);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_LONGITUD).setMaxWidth(200);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_LONGITUD).setPreferredWidth(30);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_LONGITUD).setResizable(true);
        
        tablaMarcas.getColumnModel().getColumn(NRO_COL_TAMANIOPX).setMinWidth(10);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_TAMANIOPX).setMaxWidth(200);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_TAMANIOPX).setPreferredWidth(30);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_TAMANIOPX).setResizable(true);

        tablaMarcas.getColumnModel().getColumn(NRO_COL_IMGFILENAME).setMinWidth(10);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_IMGFILENAME).setMaxWidth(200);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_IMGFILENAME).setPreferredWidth(60);
        tablaMarcas.getColumnModel().getColumn(NRO_COL_IMGFILENAME).setResizable(true);
  }

    public void cargaMsgEnTablaMarcas(String msg){
        String[] columna = new String[1];
        columna[0] = "Mensaje";
        vaciaTablaDC();
        modeloTablaDC.setColumnCount(1);
        modeloTablaDC.setColumnIdentifiers(columna);
        String[] data = new String[1];
        data[0] = msg;
        modeloTablaDC.addRow(data);
        //alineamos el contenido
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.LEFT);
        tablaMarcas.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
        tablaMarcas.setEnabled(false);
    }
    /**
     * @return the chkPoisTodos
     */
    public javax.swing.JCheckBox getChkPoisTodos() {
        return chkPoisTodos;
    }

    /**
     * @param chkPoisTodos the chkPoisTodos to set
     */
    public void setChkPoisTodos(javax.swing.JCheckBox chkPoisTodos) {
        this.chkPoisTodos = chkPoisTodos;
    }

    public void actualizaRecorrido() {
        if (ControllerCampania.getInstance().getIdCampaniaEnCurso()>=0){
            habilitaChkRecorrido(true);
            setTxtCantidadDePuntos(controllers.ControllerHistorico.getInstance().getCantPuntosHistoricos(ControllerCampania.getInstance().getIdCampaniaEnCurso()));
        }
        else{
            habilitaChkRecorrido(false);
            setTxtCantidadDePuntos(-1);
        }
    }

    public void setCantMarcasEncontradas(int cant) {
        this.cantMarcasEncontradas = cant;
        if (cant==0){
            habilitaPanelCantMarcas(false);
        }else{
            habilitaPanelCantMarcas(true);
        }
        lblCantMarcas.setText(String.valueOf(cant));
    }

    /**
     * @return the cantMarcasEncontradas
     */
    public int getCantMarcasEncontradas() {
        return cantMarcasEncontradas;
    }

    public void habilitaPanelCantMarcas(boolean estado) { 
        lblCantMarcas.setVisible(estado);
        lblTxtCantMarcas.setVisible(estado);
    }


}
/*  clases y metodos que cargan y controlan los CHECKBOXES en la TABLA CATEGORIA DE POIS */ 
class CheckBoxEditorNavegacion extends DefaultCellEditor implements ItemListener {
  private JCheckBox button;
  public CheckBoxEditorNavegacion(JCheckBox checkBox) {
    super(checkBox);
  }
  public Component getTableCellEditorComponent(JTable table,Object value,boolean isSelected,int row,int column) {
    if (value==null) return null;
    button = (JCheckBox)value;
    button.addItemListener(this);
    if (!button.isSelected()){ //trabaja con la l√≥gica invertida, porque el evento lo captura antes de dejarlo seleccionado
        PanelNavegacion.getInstance().getCategoriasSeleccionadas().add(PanelNavegacion.getInstance().getIdCatPoiFromRow(row));
    }
    else{
        PanelNavegacion.getInstance().getCategoriasSeleccionadas().remove(PanelNavegacion.getInstance().getIdCatPoiFromRow(row));
    }
    return (Component)value;
  }
  public Object getCellEditorValue() {
    button.removeItemListener(this);
    return button;
  }
  public void itemStateChanged(ItemEvent e) {    
    super.fireEditingStopped();
  }
}

/* - - -   clases y m√©todos q configuran las COLUMNAS del TABLEMODEL de la tabla CATEGORIA DE POIS   - - -  */
class TableModelMarcasNavegacion extends DefaultTableModel {        
    public TableModelMarcasNavegacion(){
        String[] encabezado = new String[7];//Defino la Cabecera (columnas)
        encabezado[0] = "Id";
        encabezado[1] = "Fecha y hora";        
        encabezado[2] = "Latitud";
        encabezado[3] = "Longitud";
        encabezado[4] = "Profundidad";
        encabezado[5] = "ImgFileName";
        encabezado[6] = "Tama√±o[px]";
        this.setColumnIdentifiers(encabezado);
    }
    @Override  
      public Class getColumnClass(int col) {  
        switch (col){
            case 0: return Integer.class;//esta column accepts only Integer values
            case 2: return Double.class;
            case 3: return Double.class;
            case 4: return Double.class;
            case 5: return String.class;
            case 6: return Integer.class;
            default: return Object.class;//other columns accept Object
        }
    }  
    @Override  
      public boolean isCellEditable(int row, int col) {
        return false; //ninguna es editable
  /*    if (col == 1) return true;//la columna de los checkbox will be editable
        else return false; */
      }
}