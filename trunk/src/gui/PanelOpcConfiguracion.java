/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelOpcConfiguracion.java
 *
 * Created on 12/04/2012, 18:04:49
 */
package gui;

import controllers.ControllerDataCapture;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.ComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import org.jdom.Element;
import persistencia.BrokerConfig;
import persistencia.Logueador;

/**
 *
 * @author Sebastian
 */
public class PanelOpcConfiguracion extends javax.swing.JPanel {
    static PanelOpcConfiguracion unicaInstancia;

    /** Creates new form PanelOpcConfiguracion */
    private PanelOpcConfiguracion() {
        initComponents();       
        btnDesconectaGps.setVisible(false);
        btnDesconectaSonda.setVisible(false);
        leeDocYseteaConfiguraciones();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTitulo = new org.jdesktop.swingx.JXPanel();
        lblTitulo = new org.jdesktop.swingx.JXLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelOpcionesGrales = new org.jdesktop.swingx.JXPanel();
        panelGeneralidades = new org.jdesktop.swingx.JXPanel();
        panelIdioma = new org.jdesktop.swingx.JXPanel();
        panelTxtIdioma = new org.jdesktop.swingx.JXPanel();
        panelComboIdioma = new org.jdesktop.swingx.JXPanel();
        panelDispositivos = new org.jdesktop.swingx.JXPanel();
        panelTxtDispositivos = new org.jdesktop.swingx.JXPanel();
        lblDispositivos = new org.jdesktop.swingx.JXLabel();
        panelBtnEscanearPuertos = new org.jdesktop.swingx.JXPanel();
        btnEscaneaPuertos = new javax.swing.JButton();
        panelGps = new org.jdesktop.swingx.JXPanel();
        chkEstadoGps = new javax.swing.JCheckBox();
        panelConfigGps = new org.jdesktop.swingx.JXPanel();
        panelTituloConfigGps = new org.jdesktop.swingx.JXPanel();
        lblTxtConfigGps = new org.jdesktop.swingx.JXLabel();
        panelPuertoComGps = new org.jdesktop.swingx.JXPanel();
        panelTituloPuertoGps = new org.jdesktop.swingx.JXPanel();
        lblPuertoGps = new org.jdesktop.swingx.JXLabel();
        panelComboPuertoGps = new org.jdesktop.swingx.JXPanel();
        comboPuertoGps = new javax.swing.JComboBox();
        panelGpsStatus = new javax.swing.JPanel();
        panelGPSconexionColor = new javax.swing.JPanel();
        GpsEstado = new javax.swing.JPanel();
        panelGPSconexionTxt = new javax.swing.JPanel();
        lblGpsEstado = new java.awt.Label();
        panelVelocidadGps = new org.jdesktop.swingx.JXPanel();
        panelTituloVelocidadGps = new org.jdesktop.swingx.JXPanel();
        lblVelocidadGps = new org.jdesktop.swingx.JXLabel();
        panelComboVelocidadGps = new org.jdesktop.swingx.JXPanel();
        comboVelocidadGps = new javax.swing.JComboBox();
        panelBitsDeDatosGps = new org.jdesktop.swingx.JXPanel();
        panelTituloBitsDatosGps = new org.jdesktop.swingx.JXPanel();
        lblBitsDatosGps = new org.jdesktop.swingx.JXLabel();
        panelComboBitsDatosGps = new org.jdesktop.swingx.JXPanel();
        comboBitsDatosGps = new javax.swing.JComboBox();
        panelBtnConectaGps = new org.jdesktop.swingx.JXPanel();
        btnConectaGps = new javax.swing.JButton();
        btnDesconectaGps = new javax.swing.JButton();
        panelParidadGps = new org.jdesktop.swingx.JXPanel();
        panelTituloParidadGps = new org.jdesktop.swingx.JXPanel();
        lblParidadGps = new org.jdesktop.swingx.JXLabel();
        panelComboParidadGps = new org.jdesktop.swingx.JXPanel();
        comboParidadGps = new javax.swing.JComboBox();
        panelSonda = new org.jdesktop.swingx.JXPanel();
        chkEstadoSonda = new javax.swing.JCheckBox();
        panelConfigSonda = new org.jdesktop.swingx.JXPanel();
        panelTituloConfigSonda = new org.jdesktop.swingx.JXPanel();
        lblTxtConfigSonda = new org.jdesktop.swingx.JXLabel();
        panelPuertoComSonda = new org.jdesktop.swingx.JXPanel();
        panelTituloPuertoSonda = new org.jdesktop.swingx.JXPanel();
        lblPuertoSonda = new org.jdesktop.swingx.JXLabel();
        panelComboPuertoSonda = new org.jdesktop.swingx.JXPanel();
        comboPuertoSonda = new javax.swing.JComboBox();
        panelSondaStatus = new javax.swing.JPanel();
        panelSondaConexionColor = new javax.swing.JPanel();
        SondaEstado = new javax.swing.JPanel();
        panelSondaConexionTxt = new javax.swing.JPanel();
        lblSondaEstado = new java.awt.Label();
        panelVelocidadSonda = new org.jdesktop.swingx.JXPanel();
        panelTituloVelocidadSonda = new org.jdesktop.swingx.JXPanel();
        lblVelocidadSonda = new org.jdesktop.swingx.JXLabel();
        panelComboVelocidadSonda = new org.jdesktop.swingx.JXPanel();
        comboVelocidadSonda = new javax.swing.JComboBox();
        panelBitsDeDatosSonda = new org.jdesktop.swingx.JXPanel();
        panelTituloBitsDatosSonda = new org.jdesktop.swingx.JXPanel();
        lblBitsDatosSonda = new org.jdesktop.swingx.JXLabel();
        panelComboBitsDatosSonda = new org.jdesktop.swingx.JXPanel();
        comboBitsDatosSonda = new javax.swing.JComboBox();
        panelBtnConectaSonda = new org.jdesktop.swingx.JXPanel();
        btnConectaSonda = new javax.swing.JButton();
        btnDesconectaSonda = new javax.swing.JButton();
        panelParidadSonda = new org.jdesktop.swingx.JXPanel();
        panelTituloParidadSonda = new org.jdesktop.swingx.JXPanel();
        lblParidadSonda = new org.jdesktop.swingx.JXLabel();
        panelComboParidadSonda = new org.jdesktop.swingx.JXPanel();
        comboParidadSonda = new javax.swing.JComboBox();
        panelPeces = new org.jdesktop.swingx.JXPanel();
        chkEstadoDetectaPeces = new javax.swing.JCheckBox();
        panelConfigHistorico = new org.jdesktop.swingx.JXPanel();
        panelTituloRutaHistorico = new org.jdesktop.swingx.JXPanel();
        lblTxtRutaHistorico = new org.jdesktop.swingx.JXLabel();
        panelCampoRutaHistorico = new org.jdesktop.swingx.JXPanel();
        campoRutaHistorico = new javax.swing.JTextField();
        btnExaminarRutaHistorico = new javax.swing.JButton();
        panelLanStatus = new javax.swing.JPanel();
        panelTodoLanStatus = new org.jdesktop.swingx.JXPanel();
        panelBtnConecta = new org.jdesktop.swingx.JXPanel();
        btnPruebaLan = new javax.swing.JButton();
        panelLANconexionColor = new javax.swing.JPanel();
        LanEstado = new javax.swing.JPanel();
        panelLANconexionTxt = new org.jdesktop.swingx.JXPanel();
        lblLanEstado = new org.jdesktop.swingx.JXLabel();
        panelUnidades = new org.jdesktop.swingx.JXPanel();
        panelTituloUnidades = new org.jdesktop.swingx.JXPanel();
        lblUnidades = new org.jdesktop.swingx.JXLabel();
        panelDistancia = new org.jdesktop.swingx.JXPanel();
        panelTxtDistancia = new org.jdesktop.swingx.JXPanel();
        lblDistancia = new org.jdesktop.swingx.JXLabel();
        panelComboDistancia = new org.jdesktop.swingx.JXPanel();
        comboDistancia = new javax.swing.JComboBox();
        panelVelocidad = new org.jdesktop.swingx.JXPanel();
        panelTxtVelocidad = new org.jdesktop.swingx.JXPanel();
        lblVelocidad = new org.jdesktop.swingx.JXLabel();
        panelComboVelocidad = new org.jdesktop.swingx.JXPanel();
        comboVelocidad = new javax.swing.JComboBox();
        panelTemperatura = new org.jdesktop.swingx.JXPanel();
        panelTxtTemp = new org.jdesktop.swingx.JXPanel();
        lblTemp = new org.jdesktop.swingx.JXLabel();
        panelComboTemp = new org.jdesktop.swingx.JXPanel();
        comboTemp = new javax.swing.JComboBox();
        panelHistorico = new org.jdesktop.swingx.JXPanel();
        lblHistorico = new org.jdesktop.swingx.JXLabel();
        chkHistoricoGps = new javax.swing.JCheckBox();
        chkHistoricoSonda = new javax.swing.JCheckBox();
        chkHistoricoPeces = new javax.swing.JCheckBox();
        chkHistoricoSondaSets = new javax.swing.JCheckBox();
        panelBotonGuardar = new org.jdesktop.swingx.JXPanel();
        btnGuardar = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(500, 500));
        setMinimumSize(new java.awt.Dimension(500, 500));
        setPreferredSize(new java.awt.Dimension(500, 500));
        setLayout(new java.awt.BorderLayout());

        panelTitulo.setMaximumSize(new java.awt.Dimension(500, 40));
        panelTitulo.setMinimumSize(new java.awt.Dimension(500, 40));
        panelTitulo.setPreferredSize(new java.awt.Dimension(500, 40));
        panelTitulo.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 8));

        lblTitulo.setText("Configuraci√≥n");
        lblTitulo.setFont(new java.awt.Font("Arial", 0, 18));
        panelTitulo.add(lblTitulo);

        add(panelTitulo, java.awt.BorderLayout.NORTH);

        jScrollPane1.setMaximumSize(new java.awt.Dimension(480, 410));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(480, 410));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(480, 410));

        panelOpcionesGrales.setMaximumSize(new java.awt.Dimension(460, 950));
        panelOpcionesGrales.setMinimumSize(new java.awt.Dimension(460, 950));
        panelOpcionesGrales.setPreferredSize(new java.awt.Dimension(460, 950));
        panelOpcionesGrales.setScrollableTracksViewportHeight(false);
        panelOpcionesGrales.setScrollableTracksViewportWidth(false);
        panelOpcionesGrales.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        panelGeneralidades.setMaximumSize(new java.awt.Dimension(450, 50));
        panelGeneralidades.setMinimumSize(new java.awt.Dimension(450, 50));
        panelGeneralidades.setPreferredSize(new java.awt.Dimension(450, 50));

        panelIdioma.setMaximumSize(new java.awt.Dimension(500, 37));
        panelIdioma.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        panelTxtIdioma.setMaximumSize(new java.awt.Dimension(100, 37));
        panelTxtIdioma.setMinimumSize(new java.awt.Dimension(100, 37));
        panelTxtIdioma.setPreferredSize(new java.awt.Dimension(100, 37));
        panelTxtIdioma.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 10));
        panelIdioma.add(panelTxtIdioma);

        panelComboIdioma.setMaximumSize(new java.awt.Dimension(350, 37));
        panelComboIdioma.setMinimumSize(new java.awt.Dimension(350, 37));
        panelComboIdioma.setPreferredSize(new java.awt.Dimension(350, 37));
        panelComboIdioma.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        panelIdioma.add(panelComboIdioma);

        javax.swing.GroupLayout panelGeneralidadesLayout = new javax.swing.GroupLayout(panelGeneralidades);
        panelGeneralidades.setLayout(panelGeneralidadesLayout);
        panelGeneralidadesLayout.setHorizontalGroup(
            panelGeneralidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
            .addGroup(panelGeneralidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelGeneralidadesLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(panelIdioma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        panelGeneralidadesLayout.setVerticalGroup(
            panelGeneralidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
            .addGroup(panelGeneralidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelGeneralidadesLayout.createSequentialGroup()
                    .addGap(0, 6, Short.MAX_VALUE)
                    .addComponent(panelIdioma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 7, Short.MAX_VALUE)))
        );

        panelOpcionesGrales.add(panelGeneralidades);

        panelDispositivos.setMaximumSize(new java.awt.Dimension(450, 600));
        panelDispositivos.setMinimumSize(new java.awt.Dimension(450, 600));
        panelDispositivos.setPreferredSize(new java.awt.Dimension(450, 600));
        panelDispositivos.setLayout(new javax.swing.BoxLayout(panelDispositivos, javax.swing.BoxLayout.PAGE_AXIS));

        panelTxtDispositivos.setMaximumSize(new java.awt.Dimension(500, 25));
        panelTxtDispositivos.setMinimumSize(new java.awt.Dimension(500, 25));
        panelTxtDispositivos.setPreferredSize(new java.awt.Dimension(500, 25));
        panelTxtDispositivos.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        lblDispositivos.setText("Dispositivos a utilizar:");
        lblDispositivos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        panelTxtDispositivos.add(lblDispositivos);

        panelBtnEscanearPuertos.setMaximumSize(new java.awt.Dimension(300, 25));
        panelBtnEscanearPuertos.setMinimumSize(new java.awt.Dimension(300, 25));
        panelBtnEscanearPuertos.setPreferredSize(new java.awt.Dimension(300, 25));
        panelBtnEscanearPuertos.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 0, 0));

        btnEscaneaPuertos.setActionCommand("Actualizar puertos COM");
        btnEscaneaPuertos.setLabel("Actualizar puertos COM");
        btnEscaneaPuertos.setPreferredSize(new java.awt.Dimension(145, 20));
        btnEscaneaPuertos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEscaneaPuertosActionPerformed(evt);
            }
        });
        panelBtnEscanearPuertos.add(btnEscaneaPuertos);

        panelTxtDispositivos.add(panelBtnEscanearPuertos);

        panelDispositivos.add(panelTxtDispositivos);

        panelGps.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        chkEstadoGps.setFont(new java.awt.Font("Tahoma", 0, 14));
        chkEstadoGps.setLabel("GPS");
        chkEstadoGps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEstadoGpsActionPerformed(evt);
            }
        });
        panelGps.add(chkEstadoGps);

        panelConfigGps.setMaximumSize(new java.awt.Dimension(500, 170));
        panelConfigGps.setMinimumSize(new java.awt.Dimension(500, 170));
        panelConfigGps.setPreferredSize(new java.awt.Dimension(500, 170));
        panelConfigGps.setLayout(new java.awt.GridLayout(5, 1));

        panelTituloConfigGps.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 20, 10));

        lblTxtConfigGps.setText("Configuraci√≥n de conexion al GPS:");
        lblTxtConfigGps.setEnabled(false);
        lblTxtConfigGps.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelTituloConfigGps.add(lblTxtConfigGps);

        panelConfigGps.add(panelTituloConfigGps);

        panelPuertoComGps.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        panelTituloPuertoGps.setMaximumSize(new java.awt.Dimension(150, 100));
        panelTituloPuertoGps.setMinimumSize(new java.awt.Dimension(150, 100));
        panelTituloPuertoGps.setPreferredSize(new java.awt.Dimension(150, 100));
        panelTituloPuertoGps.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        lblPuertoGps.setText("Puerto");
        lblPuertoGps.setEnabled(false);
        lblPuertoGps.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelTituloPuertoGps.add(lblPuertoGps);

        panelPuertoComGps.add(panelTituloPuertoGps);

        panelComboPuertoGps.setMaximumSize(new java.awt.Dimension(350, 100));
        panelComboPuertoGps.setMinimumSize(new java.awt.Dimension(350, 100));
        panelComboPuertoGps.setPreferredSize(new java.awt.Dimension(350, 100));
        panelComboPuertoGps.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        comboPuertoGps.setFont(new java.awt.Font("Tahoma", 0, 14));
        comboPuertoGps.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "COM 1", "COM 2", "COM 3", "COM 4", "COM 5", "COM 14", "COM 15", "COM 16", "COM 17" }));
        comboPuertoGps.setEnabled(false);
        comboPuertoGps.setMaximumSize(new java.awt.Dimension(120, 20));
        comboPuertoGps.setMinimumSize(new java.awt.Dimension(120, 20));
        comboPuertoGps.setPreferredSize(new java.awt.Dimension(120, 20));
        panelComboPuertoGps.add(comboPuertoGps);

        panelGpsStatus.setMaximumSize(new java.awt.Dimension(200, 30));
        panelGpsStatus.setMinimumSize(new java.awt.Dimension(133, 30));
        panelGpsStatus.setPreferredSize(new java.awt.Dimension(200, 30));
        panelGpsStatus.setLayout(new javax.swing.BoxLayout(panelGpsStatus, javax.swing.BoxLayout.LINE_AXIS));

        panelGPSconexionColor.setMaximumSize(new java.awt.Dimension(60, 30));
        panelGPSconexionColor.setMinimumSize(new java.awt.Dimension(60, 30));
        panelGPSconexionColor.setPreferredSize(new java.awt.Dimension(60, 30));
        panelGPSconexionColor.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        GpsEstado.setBackground(new java.awt.Color(204, 0, 0));
        GpsEstado.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        GpsEstado.setEnabled(false);
        GpsEstado.setMaximumSize(new java.awt.Dimension(30, 20));
        GpsEstado.setMinimumSize(new java.awt.Dimension(30, 20));

        javax.swing.GroupLayout GpsEstadoLayout = new javax.swing.GroupLayout(GpsEstado);
        GpsEstado.setLayout(GpsEstadoLayout);
        GpsEstadoLayout.setHorizontalGroup(
            GpsEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );
        GpsEstadoLayout.setVerticalGroup(
            GpsEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        panelGPSconexionColor.add(GpsEstado);

        panelGpsStatus.add(panelGPSconexionColor);

        panelGPSconexionTxt.setMaximumSize(new java.awt.Dimension(110, 30));
        panelGPSconexionTxt.setMinimumSize(new java.awt.Dimension(93, 30));
        panelGPSconexionTxt.setPreferredSize(new java.awt.Dimension(110, 30));
        panelGPSconexionTxt.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lblGpsEstado.setEnabled(false);
        lblGpsEstado.setFont(new java.awt.Font("Arial", 0, 14));
        lblGpsEstado.setText("Desconectado");
        panelGPSconexionTxt.add(lblGpsEstado);

        panelGpsStatus.add(panelGPSconexionTxt);

        panelComboPuertoGps.add(panelGpsStatus);

        panelPuertoComGps.add(panelComboPuertoGps);

        panelConfigGps.add(panelPuertoComGps);

        panelVelocidadGps.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        panelTituloVelocidadGps.setMaximumSize(new java.awt.Dimension(150, 100));
        panelTituloVelocidadGps.setMinimumSize(new java.awt.Dimension(150, 100));
        panelTituloVelocidadGps.setPreferredSize(new java.awt.Dimension(150, 100));
        panelTituloVelocidadGps.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        lblVelocidadGps.setText("Velocidad (bps)");
        lblVelocidadGps.setEnabled(false);
        lblVelocidadGps.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelTituloVelocidadGps.add(lblVelocidadGps);

        panelVelocidadGps.add(panelTituloVelocidadGps);

        panelComboVelocidadGps.setMaximumSize(new java.awt.Dimension(350, 100));
        panelComboVelocidadGps.setMinimumSize(new java.awt.Dimension(350, 100));
        panelComboVelocidadGps.setPreferredSize(new java.awt.Dimension(350, 100));
        panelComboVelocidadGps.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        comboVelocidadGps.setFont(new java.awt.Font("Tahoma", 0, 14));
        comboVelocidadGps.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1200", "2400", "4800", "9600", "19200", "38400" }));
        comboVelocidadGps.setEnabled(false);
        comboVelocidadGps.setMaximumSize(new java.awt.Dimension(120, 20));
        comboVelocidadGps.setMinimumSize(new java.awt.Dimension(120, 20));
        comboVelocidadGps.setPreferredSize(new java.awt.Dimension(120, 20));
        panelComboVelocidadGps.add(comboVelocidadGps);

        panelVelocidadGps.add(panelComboVelocidadGps);

        panelConfigGps.add(panelVelocidadGps);

        panelBitsDeDatosGps.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 5));

        panelTituloBitsDatosGps.setMaximumSize(new java.awt.Dimension(150, 100));
        panelTituloBitsDatosGps.setMinimumSize(new java.awt.Dimension(150, 100));
        panelTituloBitsDatosGps.setPreferredSize(new java.awt.Dimension(150, 100));
        panelTituloBitsDatosGps.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        lblBitsDatosGps.setText("Bits de Datos");
        lblBitsDatosGps.setEnabled(false);
        lblBitsDatosGps.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelTituloBitsDatosGps.add(lblBitsDatosGps);

        panelBitsDeDatosGps.add(panelTituloBitsDatosGps);

        panelComboBitsDatosGps.setMaximumSize(new java.awt.Dimension(350, 100));
        panelComboBitsDatosGps.setMinimumSize(new java.awt.Dimension(350, 100));
        panelComboBitsDatosGps.setPreferredSize(new java.awt.Dimension(350, 100));
        panelComboBitsDatosGps.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        comboBitsDatosGps.setFont(new java.awt.Font("Tahoma", 0, 14));
        comboBitsDatosGps.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "6", "7", "8" }));
        comboBitsDatosGps.setEnabled(false);
        comboBitsDatosGps.setMaximumSize(new java.awt.Dimension(120, 20));
        comboBitsDatosGps.setMinimumSize(new java.awt.Dimension(120, 20));
        comboBitsDatosGps.setPreferredSize(new java.awt.Dimension(120, 20));
        panelComboBitsDatosGps.add(comboBitsDatosGps);

        panelBtnConectaGps.setPreferredSize(new java.awt.Dimension(200, 30));

        btnConectaGps.setFont(new java.awt.Font("Tahoma", 0, 12));
        btnConectaGps.setText("Conectar");
        btnConectaGps.setEnabled(false);
        btnConectaGps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectaGpsActionPerformed(evt);
            }
        });
        panelBtnConectaGps.add(btnConectaGps);

        btnDesconectaGps.setFont(new java.awt.Font("Tahoma", 1, 12));
        btnDesconectaGps.setText("Desconectar");
        btnDesconectaGps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesconectaGpsActionPerformed(evt);
            }
        });
        panelBtnConectaGps.add(btnDesconectaGps);

        panelComboBitsDatosGps.add(panelBtnConectaGps);

        panelBitsDeDatosGps.add(panelComboBitsDatosGps);

        panelConfigGps.add(panelBitsDeDatosGps);

        panelParidadGps.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 5));

        panelTituloParidadGps.setMaximumSize(new java.awt.Dimension(150, 100));
        panelTituloParidadGps.setMinimumSize(new java.awt.Dimension(150, 100));
        panelTituloParidadGps.setPreferredSize(new java.awt.Dimension(150, 100));
        panelTituloParidadGps.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        lblParidadGps.setText("Paridad");
        lblParidadGps.setEnabled(false);
        lblParidadGps.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelTituloParidadGps.add(lblParidadGps);

        panelParidadGps.add(panelTituloParidadGps);

        panelComboParidadGps.setMaximumSize(new java.awt.Dimension(350, 100));
        panelComboParidadGps.setMinimumSize(new java.awt.Dimension(350, 100));
        panelComboParidadGps.setPreferredSize(new java.awt.Dimension(350, 100));
        panelComboParidadGps.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        comboParidadGps.setFont(new java.awt.Font("Tahoma", 0, 14));
        comboParidadGps.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ninguno", "Par", "Impar" }));
        comboParidadGps.setEnabled(false);
        comboParidadGps.setMaximumSize(new java.awt.Dimension(120, 20));
        comboParidadGps.setMinimumSize(new java.awt.Dimension(120, 20));
        comboParidadGps.setPreferredSize(new java.awt.Dimension(120, 20));
        panelComboParidadGps.add(comboParidadGps);

        panelParidadGps.add(panelComboParidadGps);

        panelConfigGps.add(panelParidadGps);

        panelGps.add(panelConfigGps);

        panelDispositivos.add(panelGps);

        panelSonda.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        chkEstadoSonda.setFont(new java.awt.Font("Tahoma", 0, 14));
        chkEstadoSonda.setText("SONDA");
        chkEstadoSonda.setEnabled(false);
        chkEstadoSonda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEstadoSondaActionPerformed(evt);
            }
        });
        panelSonda.add(chkEstadoSonda);

        panelConfigSonda.setMaximumSize(new java.awt.Dimension(500, 170));
        panelConfigSonda.setMinimumSize(new java.awt.Dimension(500, 170));
        panelConfigSonda.setPreferredSize(new java.awt.Dimension(500, 170));
        panelConfigSonda.setLayout(new java.awt.GridLayout(5, 1));

        panelTituloConfigSonda.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 10));

        lblTxtConfigSonda.setText("Configuraci√≥n de conexion a la Sonda:");
        lblTxtConfigSonda.setEnabled(false);
        lblTxtConfigSonda.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelTituloConfigSonda.add(lblTxtConfigSonda);

        panelConfigSonda.add(panelTituloConfigSonda);

        panelPuertoComSonda.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 5));

        panelTituloPuertoSonda.setMaximumSize(new java.awt.Dimension(150, 100));
        panelTituloPuertoSonda.setMinimumSize(new java.awt.Dimension(150, 100));
        panelTituloPuertoSonda.setPreferredSize(new java.awt.Dimension(150, 100));
        panelTituloPuertoSonda.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        lblPuertoSonda.setText("Puerto");
        lblPuertoSonda.setEnabled(false);
        lblPuertoSonda.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelTituloPuertoSonda.add(lblPuertoSonda);

        panelPuertoComSonda.add(panelTituloPuertoSonda);

        panelComboPuertoSonda.setMaximumSize(new java.awt.Dimension(350, 100));
        panelComboPuertoSonda.setMinimumSize(new java.awt.Dimension(350, 100));
        panelComboPuertoSonda.setPreferredSize(new java.awt.Dimension(350, 100));
        panelComboPuertoSonda.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        comboPuertoSonda.setFont(new java.awt.Font("Tahoma", 0, 14));
        comboPuertoSonda.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "COM 1", "COM 2", "COM 3", "COM 4", "COM 5", "COM 14", "COM 15", "COM 16", "COM 17" }));
        comboPuertoSonda.setEnabled(false);
        comboPuertoSonda.setMaximumSize(new java.awt.Dimension(120, 20));
        comboPuertoSonda.setMinimumSize(new java.awt.Dimension(120, 20));
        comboPuertoSonda.setPreferredSize(new java.awt.Dimension(120, 20));
        comboPuertoSonda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPuertoSondaActionPerformed(evt);
            }
        });
        panelComboPuertoSonda.add(comboPuertoSonda);

        panelSondaStatus.setMaximumSize(new java.awt.Dimension(200, 30));
        panelSondaStatus.setMinimumSize(new java.awt.Dimension(133, 30));
        panelSondaStatus.setPreferredSize(new java.awt.Dimension(200, 30));
        panelSondaStatus.setLayout(new javax.swing.BoxLayout(panelSondaStatus, javax.swing.BoxLayout.LINE_AXIS));

        panelSondaConexionColor.setMaximumSize(new java.awt.Dimension(60, 30));
        panelSondaConexionColor.setMinimumSize(new java.awt.Dimension(60, 30));
        panelSondaConexionColor.setPreferredSize(new java.awt.Dimension(60, 30));
        panelSondaConexionColor.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        SondaEstado.setBackground(new java.awt.Color(204, 0, 0));
        SondaEstado.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SondaEstado.setEnabled(false);
        SondaEstado.setMaximumSize(new java.awt.Dimension(30, 20));
        SondaEstado.setMinimumSize(new java.awt.Dimension(30, 20));

        javax.swing.GroupLayout SondaEstadoLayout = new javax.swing.GroupLayout(SondaEstado);
        SondaEstado.setLayout(SondaEstadoLayout);
        SondaEstadoLayout.setHorizontalGroup(
            SondaEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );
        SondaEstadoLayout.setVerticalGroup(
            SondaEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        panelSondaConexionColor.add(SondaEstado);

        panelSondaStatus.add(panelSondaConexionColor);

        panelSondaConexionTxt.setMaximumSize(new java.awt.Dimension(110, 30));
        panelSondaConexionTxt.setMinimumSize(new java.awt.Dimension(93, 30));
        panelSondaConexionTxt.setPreferredSize(new java.awt.Dimension(110, 30));
        panelSondaConexionTxt.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lblSondaEstado.setEnabled(false);
        lblSondaEstado.setFont(new java.awt.Font("Arial", 0, 14));
        lblSondaEstado.setText("Desconectado");
        panelSondaConexionTxt.add(lblSondaEstado);

        panelSondaStatus.add(panelSondaConexionTxt);

        panelComboPuertoSonda.add(panelSondaStatus);

        panelPuertoComSonda.add(panelComboPuertoSonda);

        panelConfigSonda.add(panelPuertoComSonda);

        panelVelocidadSonda.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 5));

        panelTituloVelocidadSonda.setMaximumSize(new java.awt.Dimension(150, 100));
        panelTituloVelocidadSonda.setMinimumSize(new java.awt.Dimension(150, 100));
        panelTituloVelocidadSonda.setPreferredSize(new java.awt.Dimension(150, 100));
        panelTituloVelocidadSonda.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        lblVelocidadSonda.setText("Velocidad (bps)");
        lblVelocidadSonda.setEnabled(false);
        lblVelocidadSonda.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelTituloVelocidadSonda.add(lblVelocidadSonda);

        panelVelocidadSonda.add(panelTituloVelocidadSonda);

        panelComboVelocidadSonda.setMaximumSize(new java.awt.Dimension(350, 100));
        panelComboVelocidadSonda.setMinimumSize(new java.awt.Dimension(350, 100));
        panelComboVelocidadSonda.setPreferredSize(new java.awt.Dimension(350, 100));
        panelComboVelocidadSonda.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        comboVelocidadSonda.setFont(new java.awt.Font("Tahoma", 0, 14));
        comboVelocidadSonda.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1200", "2400", "4800", "9600", "19200", "38400" }));
        comboVelocidadSonda.setEnabled(false);
        comboVelocidadSonda.setMaximumSize(new java.awt.Dimension(120, 20));
        comboVelocidadSonda.setMinimumSize(new java.awt.Dimension(120, 20));
        comboVelocidadSonda.setPreferredSize(new java.awt.Dimension(120, 20));
        panelComboVelocidadSonda.add(comboVelocidadSonda);

        panelVelocidadSonda.add(panelComboVelocidadSonda);

        panelConfigSonda.add(panelVelocidadSonda);

        panelBitsDeDatosSonda.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 5));

        panelTituloBitsDatosSonda.setMaximumSize(new java.awt.Dimension(150, 100));
        panelTituloBitsDatosSonda.setMinimumSize(new java.awt.Dimension(150, 100));
        panelTituloBitsDatosSonda.setPreferredSize(new java.awt.Dimension(150, 100));
        panelTituloBitsDatosSonda.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        lblBitsDatosSonda.setText("Bits de Datos");
        lblBitsDatosSonda.setEnabled(false);
        lblBitsDatosSonda.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelTituloBitsDatosSonda.add(lblBitsDatosSonda);

        panelBitsDeDatosSonda.add(panelTituloBitsDatosSonda);

        panelComboBitsDatosSonda.setMaximumSize(new java.awt.Dimension(350, 100));
        panelComboBitsDatosSonda.setMinimumSize(new java.awt.Dimension(350, 100));
        panelComboBitsDatosSonda.setPreferredSize(new java.awt.Dimension(350, 100));
        panelComboBitsDatosSonda.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        comboBitsDatosSonda.setFont(new java.awt.Font("Tahoma", 0, 14));
        comboBitsDatosSonda.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "6", "7", "8" }));
        comboBitsDatosSonda.setEnabled(false);
        comboBitsDatosSonda.setMaximumSize(new java.awt.Dimension(120, 20));
        comboBitsDatosSonda.setMinimumSize(new java.awt.Dimension(120, 20));
        comboBitsDatosSonda.setPreferredSize(new java.awt.Dimension(120, 20));
        panelComboBitsDatosSonda.add(comboBitsDatosSonda);

        panelBtnConectaSonda.setPreferredSize(new java.awt.Dimension(200, 30));

        btnConectaSonda.setFont(new java.awt.Font("Tahoma", 0, 12));
        btnConectaSonda.setText("Conectar");
        btnConectaSonda.setEnabled(false);
        btnConectaSonda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectaSondaActionPerformed(evt);
            }
        });
        panelBtnConectaSonda.add(btnConectaSonda);

        btnDesconectaSonda.setFont(new java.awt.Font("Tahoma", 1, 12));
        btnDesconectaSonda.setText("Desconecta");
        btnDesconectaSonda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesconectaSondaActionPerformed(evt);
            }
        });
        panelBtnConectaSonda.add(btnDesconectaSonda);

        panelComboBitsDatosSonda.add(panelBtnConectaSonda);

        panelBitsDeDatosSonda.add(panelComboBitsDatosSonda);

        panelConfigSonda.add(panelBitsDeDatosSonda);

        panelParidadSonda.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 5));

        panelTituloParidadSonda.setMaximumSize(new java.awt.Dimension(150, 100));
        panelTituloParidadSonda.setMinimumSize(new java.awt.Dimension(150, 100));
        panelTituloParidadSonda.setPreferredSize(new java.awt.Dimension(150, 100));
        panelTituloParidadSonda.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        lblParidadSonda.setText("Paridad");
        lblParidadSonda.setEnabled(false);
        lblParidadSonda.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelTituloParidadSonda.add(lblParidadSonda);

        panelParidadSonda.add(panelTituloParidadSonda);

        panelComboParidadSonda.setMaximumSize(new java.awt.Dimension(350, 100));
        panelComboParidadSonda.setMinimumSize(new java.awt.Dimension(350, 100));
        panelComboParidadSonda.setPreferredSize(new java.awt.Dimension(350, 100));
        panelComboParidadSonda.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        comboParidadSonda.setFont(new java.awt.Font("Tahoma", 0, 14));
        comboParidadSonda.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ninguno", "Par", "Impar" }));
        comboParidadSonda.setEnabled(false);
        comboParidadSonda.setMaximumSize(new java.awt.Dimension(120, 20));
        comboParidadSonda.setMinimumSize(new java.awt.Dimension(120, 20));
        comboParidadSonda.setPreferredSize(new java.awt.Dimension(120, 20));
        panelComboParidadSonda.add(comboParidadSonda);

        panelParidadSonda.add(panelComboParidadSonda);

        panelConfigSonda.add(panelParidadSonda);

        panelSonda.add(panelConfigSonda);

        panelDispositivos.add(panelSonda);

        panelPeces.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        chkEstadoDetectaPeces.setFont(new java.awt.Font("Tahoma", 0, 14));
        chkEstadoDetectaPeces.setText("Detecci√≥n de Peces");
        chkEstadoDetectaPeces.setEnabled(false);
        chkEstadoDetectaPeces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEstadoDetectaPecesActionPerformed(evt);
            }
        });
        panelPeces.add(chkEstadoDetectaPeces);

        panelConfigHistorico.setMaximumSize(new java.awt.Dimension(500, 60));
        panelConfigHistorico.setMinimumSize(new java.awt.Dimension(500, 60));
        panelConfigHistorico.setPreferredSize(new java.awt.Dimension(500, 60));
        panelConfigHistorico.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 20, 5));

        panelTituloRutaHistorico.setMaximumSize(new java.awt.Dimension(500, 85));
        panelTituloRutaHistorico.setMinimumSize(new java.awt.Dimension(500, 85));
        panelTituloRutaHistorico.setLayout(new java.awt.BorderLayout(10, 0));

        lblTxtRutaHistorico.setText(" Ruta al Historico Remoto (sonda):");
        lblTxtRutaHistorico.setEnabled(false);
        lblTxtRutaHistorico.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelTituloRutaHistorico.add(lblTxtRutaHistorico, java.awt.BorderLayout.SOUTH);

        panelConfigHistorico.add(panelTituloRutaHistorico);

        panelCampoRutaHistorico.setMaximumSize(new java.awt.Dimension(500, 85));
        panelCampoRutaHistorico.setMinimumSize(new java.awt.Dimension(500, 85));
        panelCampoRutaHistorico.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        campoRutaHistorico.setFont(new java.awt.Font("Tahoma", 0, 14));
        campoRutaHistorico.setText("\\\\192.168.1.4\\imagenesSonda");
        campoRutaHistorico.setEnabled(false);
        campoRutaHistorico.setMaximumSize(new java.awt.Dimension(250, 23));
        campoRutaHistorico.setMinimumSize(new java.awt.Dimension(250, 23));
        campoRutaHistorico.setPreferredSize(new java.awt.Dimension(250, 23));
        panelCampoRutaHistorico.add(campoRutaHistorico);

        btnExaminarRutaHistorico.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnExaminarRutaHistorico.setText("Examinar");
        btnExaminarRutaHistorico.setEnabled(false);
        panelCampoRutaHistorico.add(btnExaminarRutaHistorico);

        panelConfigHistorico.add(panelCampoRutaHistorico);

        panelPeces.add(panelConfigHistorico);

        panelLanStatus.setMaximumSize(new java.awt.Dimension(450, 30));
        panelLanStatus.setPreferredSize(new java.awt.Dimension(450, 30));
        panelLanStatus.setLayout(new javax.swing.BoxLayout(panelLanStatus, javax.swing.BoxLayout.LINE_AXIS));

        panelTodoLanStatus.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        panelBtnConecta.setMaximumSize(new java.awt.Dimension(200, 30));
        panelBtnConecta.setPreferredSize(new java.awt.Dimension(200, 30));
        panelBtnConecta.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 3));

        btnPruebaLan.setFont(new java.awt.Font("Tahoma", 0, 12));
        btnPruebaLan.setText("Probar conexi√≥n");
        btnPruebaLan.setEnabled(false);
        panelBtnConecta.add(btnPruebaLan);

        panelTodoLanStatus.add(panelBtnConecta);

        panelLANconexionColor.setMaximumSize(new java.awt.Dimension(60, 30));
        panelLANconexionColor.setMinimumSize(new java.awt.Dimension(60, 30));
        panelLANconexionColor.setPreferredSize(new java.awt.Dimension(60, 30));
        panelLANconexionColor.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        LanEstado.setBackground(new java.awt.Color(204, 0, 0));
        LanEstado.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        LanEstado.setEnabled(false);
        LanEstado.setMaximumSize(new java.awt.Dimension(30, 20));
        LanEstado.setMinimumSize(new java.awt.Dimension(30, 20));

        javax.swing.GroupLayout LanEstadoLayout = new javax.swing.GroupLayout(LanEstado);
        LanEstado.setLayout(LanEstadoLayout);
        LanEstadoLayout.setHorizontalGroup(
            LanEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );
        LanEstadoLayout.setVerticalGroup(
            LanEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        panelLANconexionColor.add(LanEstado);

        panelTodoLanStatus.add(panelLANconexionColor);

        panelLANconexionTxt.setMaximumSize(new java.awt.Dimension(130, 30));
        panelLANconexionTxt.setMinimumSize(new java.awt.Dimension(101, 30));
        panelLANconexionTxt.setPreferredSize(new java.awt.Dimension(130, 30));
        panelLANconexionTxt.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 7));

        lblLanEstado.setText("Desconectado");
        lblLanEstado.setEnabled(false);
        lblLanEstado.setFont(new java.awt.Font("Arial", 0, 14));
        panelLANconexionTxt.add(lblLanEstado);

        panelTodoLanStatus.add(panelLANconexionTxt);

        panelLanStatus.add(panelTodoLanStatus);

        panelPeces.add(panelLanStatus);

        panelDispositivos.add(panelPeces);

        panelOpcionesGrales.add(panelDispositivos);

        panelUnidades.setMaximumSize(new java.awt.Dimension(450, 150));
        panelUnidades.setMinimumSize(new java.awt.Dimension(450, 150));
        panelUnidades.setPreferredSize(new java.awt.Dimension(450, 150));
        panelUnidades.setLayout(new java.awt.GridLayout(4, 1));

        panelTituloUnidades.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 10));

        lblUnidades.setText("Unidades:");
        lblUnidades.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelTituloUnidades.add(lblUnidades);

        panelUnidades.add(panelTituloUnidades);

        panelDistancia.setMaximumSize(new java.awt.Dimension(500, 37));
        panelDistancia.setMinimumSize(new java.awt.Dimension(500, 37));
        panelDistancia.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        panelTxtDistancia.setMaximumSize(new java.awt.Dimension(100, 37));
        panelTxtDistancia.setMinimumSize(new java.awt.Dimension(100, 37));
        panelTxtDistancia.setPreferredSize(new java.awt.Dimension(100, 37));
        panelTxtDistancia.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 10));

        lblDistancia.setText("Distancia");
        lblDistancia.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelTxtDistancia.add(lblDistancia);

        panelDistancia.add(panelTxtDistancia);

        panelComboDistancia.setMaximumSize(new java.awt.Dimension(350, 37));
        panelComboDistancia.setMinimumSize(new java.awt.Dimension(350, 37));
        panelComboDistancia.setPreferredSize(new java.awt.Dimension(350, 37));
        panelComboDistancia.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        comboDistancia.setFont(new java.awt.Font("Tahoma", 0, 14));
        comboDistancia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Kilometros", "Millas" }));
        comboDistancia.setMaximumSize(new java.awt.Dimension(130, 23));
        comboDistancia.setMinimumSize(new java.awt.Dimension(130, 23));
        comboDistancia.setPreferredSize(new java.awt.Dimension(130, 23));
        panelComboDistancia.add(comboDistancia);

        panelDistancia.add(panelComboDistancia);

        panelUnidades.add(panelDistancia);

        panelVelocidad.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        panelTxtVelocidad.setMaximumSize(new java.awt.Dimension(100, 37));
        panelTxtVelocidad.setMinimumSize(new java.awt.Dimension(100, 37));
        panelTxtVelocidad.setPreferredSize(new java.awt.Dimension(100, 37));
        panelTxtVelocidad.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 10));

        lblVelocidad.setText("Velocidad");
        lblVelocidad.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelTxtVelocidad.add(lblVelocidad);

        panelVelocidad.add(panelTxtVelocidad);

        panelComboVelocidad.setMaximumSize(new java.awt.Dimension(350, 37));
        panelComboVelocidad.setMinimumSize(new java.awt.Dimension(350, 37));
        panelComboVelocidad.setPreferredSize(new java.awt.Dimension(350, 37));
        panelComboVelocidad.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        comboVelocidad.setFont(new java.awt.Font("Tahoma", 0, 14));
        comboVelocidad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Km/h", "Nudos" }));
        comboVelocidad.setMaximumSize(new java.awt.Dimension(130, 23));
        comboVelocidad.setMinimumSize(new java.awt.Dimension(130, 23));
        comboVelocidad.setPreferredSize(new java.awt.Dimension(130, 23));
        panelComboVelocidad.add(comboVelocidad);

        panelVelocidad.add(panelComboVelocidad);

        panelUnidades.add(panelVelocidad);

        panelTemperatura.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        panelTxtTemp.setMaximumSize(new java.awt.Dimension(100, 37));
        panelTxtTemp.setMinimumSize(new java.awt.Dimension(100, 37));
        panelTxtTemp.setPreferredSize(new java.awt.Dimension(100, 37));
        panelTxtTemp.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 10));

        lblTemp.setText("Temperatura");
        lblTemp.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelTxtTemp.add(lblTemp);

        panelTemperatura.add(panelTxtTemp);

        panelComboTemp.setMaximumSize(new java.awt.Dimension(350, 37));
        panelComboTemp.setMinimumSize(new java.awt.Dimension(350, 37));
        panelComboTemp.setPreferredSize(new java.awt.Dimension(350, 37));
        panelComboTemp.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        comboTemp.setFont(new java.awt.Font("Tahoma", 0, 14));
        comboTemp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Celcius", "Farenheit", "Kelvin" }));
        comboTemp.setMaximumSize(new java.awt.Dimension(130, 23));
        comboTemp.setMinimumSize(new java.awt.Dimension(130, 23));
        comboTemp.setPreferredSize(new java.awt.Dimension(130, 23));
        panelComboTemp.add(comboTemp);

        panelTemperatura.add(panelComboTemp);

        panelUnidades.add(panelTemperatura);

        panelOpcionesGrales.add(panelUnidades);

        panelHistorico.setMaximumSize(new java.awt.Dimension(450, 150));
        panelHistorico.setMinimumSize(new java.awt.Dimension(450, 150));
        panelHistorico.setPreferredSize(new java.awt.Dimension(450, 150));
        panelHistorico.setLayout(new java.awt.GridLayout(5, 1));

        lblHistorico.setText("Historico:");
        lblHistorico.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelHistorico.add(lblHistorico);

        chkHistoricoGps.setFont(new java.awt.Font("Tahoma", 0, 14));
        chkHistoricoGps.setText("Guardar datos del GPS");
        chkHistoricoGps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkHistoricoGpsActionPerformed(evt);
            }
        });
        panelHistorico.add(chkHistoricoGps);

        chkHistoricoSonda.setFont(new java.awt.Font("Tahoma", 0, 14));
        chkHistoricoSonda.setText("Guardar datos de la SONDA");
        chkHistoricoSonda.setEnabled(false);
        panelHistorico.add(chkHistoricoSonda);

        chkHistoricoPeces.setFont(new java.awt.Font("Tahoma", 0, 14));
        chkHistoricoPeces.setText("Guardar datos obtenidos del procesamiento de imagen");
        chkHistoricoPeces.setEnabled(false);
        panelHistorico.add(chkHistoricoPeces);

        chkHistoricoSondaSets.setFont(new java.awt.Font("Tahoma", 0, 14));
        chkHistoricoSondaSets.setText("Guardar datos de configuraci√≥n de la sonda");
        chkHistoricoSondaSets.setEnabled(false);
        panelHistorico.add(chkHistoricoSondaSets);

        panelOpcionesGrales.add(panelHistorico);

        jScrollPane1.setViewportView(panelOpcionesGrales);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panelBotonGuardar.setMaximumSize(new java.awt.Dimension(500, 50));
        panelBotonGuardar.setMinimumSize(new java.awt.Dimension(500, 50));
        panelBotonGuardar.setPreferredSize(new java.awt.Dimension(500, 50));
        panelBotonGuardar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 5));

        btnGuardar.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnGuardar.setText("Guardar cambios");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        panelBotonGuardar.add(btnGuardar);

        add(panelBotonGuardar, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

private void chkEstadoGpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEstadoGpsActionPerformed
// TODO add your handling code here:
    clickEnChkEstadoGps();
}//GEN-LAST:event_chkEstadoGpsActionPerformed

private void chkHistoricoGpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkHistoricoGpsActionPerformed
// TODO add your handling code here:
    clickEnChkHistoricoGps();
}//GEN-LAST:event_chkHistoricoGpsActionPerformed

private void chkEstadoSondaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEstadoSondaActionPerformed
    clickEnChkEstadoSonda();
}//GEN-LAST:event_chkEstadoSondaActionPerformed

private void chkEstadoDetectaPecesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEstadoDetectaPecesActionPerformed
    clickEnChkEstadoDetectaPeces();
}//GEN-LAST:event_chkEstadoDetectaPecesActionPerformed

private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
   
    if (controllers.ControllerPpal.getInstance().guardarConfigPanelConfig()){
        JOptionPane.showMessageDialog(this, "Se guardaron los cambios correctamente");
    }
    else { JOptionPane.showMessageDialog(this, "Hubo un error y no se guardaron los cambios"); }
}//GEN-LAST:event_btnGuardarActionPerformed

private void btnConectaGpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectaGpsActionPerformed
    if (!(controllers.ControllerPpal.getInstance().conectaYleeDelGps())) {
        //JOptionPane.showMessageDialog(this, "Hubo un error en la conexi√≥n al GPS y no se inici√≥");
        PanelBarraDeEstado.getInstance().mostrarMensaje("Hubo un error en la conexi√≥n al GPS y no se inici√≥",1);
    }
    else
        { btnConectaGps.setVisible(false);
          btnDesconectaGps.setVisible(true);
          chkEstadoGps.setEnabled(false);
          setPanelConfigGps(false);
        }
}//GEN-LAST:event_btnConectaGpsActionPerformed

private void btnDesconectaGpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesconectaGpsActionPerformed
    if (!(controllers.ControllerPpal.getInstance().detenerLecturaGps())) {
        JOptionPane.showMessageDialog(this, "Hubo un error en la conexi√≥n al GPS y no se detuvo");
    }
    else
        { habilitaBtnConectaGps();  
          if (modelo.dataCapture.Sonda.getInstance().getEstadoConexion()==2) { 
              btnDesconectaSondaActionPerformed(null);
          }
        }
}//GEN-LAST:event_btnDesconectaGpsActionPerformed

private void btnConectaSondaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectaSondaActionPerformed
    if (!(controllers.ControllerPpal.getInstance().conectaYleeDeLaSonda())) {
        //JOptionPane.showMessageDialog(this, "Hubo un error en la conexi√≥n a la Sonda y no se inici√≥");
        PanelBarraDeEstado.getInstance().mostrarMensaje("Hubo un error en la conexi√≥n a la Sonda y no se inici√≥",1);        
    }
    else
        { 
            btnConectaSonda.setVisible(false);
            btnDesconectaSonda.setVisible(true);
            chkEstadoSonda.setEnabled(false);
            setPanelConfigSonda(false);            
        }
}//GEN-LAST:event_btnConectaSondaActionPerformed

private void btnDesconectaSondaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesconectaSondaActionPerformed
    if (!(controllers.ControllerPpal.getInstance().detenerLecturaSonda())) {
        JOptionPane.showMessageDialog(this, "Hubo un error en la conexi√≥n a la Sonda y no se detuvo");        
    }
    else
        { btnConectaSonda.setVisible(true);
          btnDesconectaSonda.setVisible(false);
          chkEstadoSonda.setEnabled(true);
          setPanelConfigSonda(true);
        }
}//GEN-LAST:event_btnDesconectaSondaActionPerformed

private void comboPuertoSondaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPuertoSondaActionPerformed
    if (((String)getComboPuertoGps().getSelectedItem()).equals((String)getComboPuertoSonda().getSelectedItem()))
      {
        setPanelConfigSonda(false);
        getComboPuertoSonda().setEnabled(true);
      }
    else
        { setPanelConfigSonda(true); }
}//GEN-LAST:event_comboPuertoSondaActionPerformed

private void btnEscaneaPuertosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEscaneaPuertosActionPerformed
    ControllerDataCapture.getInstance().obtienePuertosComExistentes();    
    btnEscanearPuertosPresionado(true);
}//GEN-LAST:event_btnEscaneaPuertosActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel GpsEstado;
    private javax.swing.JPanel LanEstado;
    private javax.swing.JPanel SondaEstado;
    private javax.swing.JButton btnConectaGps;
    private javax.swing.JButton btnConectaSonda;
    private javax.swing.JButton btnDesconectaGps;
    private javax.swing.JButton btnDesconectaSonda;
    private javax.swing.JButton btnEscaneaPuertos;
    private javax.swing.JButton btnExaminarRutaHistorico;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnPruebaLan;
    private javax.swing.JTextField campoRutaHistorico;
    private javax.swing.JCheckBox chkEstadoDetectaPeces;
    private javax.swing.JCheckBox chkEstadoGps;
    private javax.swing.JCheckBox chkEstadoSonda;
    private javax.swing.JCheckBox chkHistoricoGps;
    private javax.swing.JCheckBox chkHistoricoPeces;
    private javax.swing.JCheckBox chkHistoricoSonda;
    private javax.swing.JCheckBox chkHistoricoSondaSets;
    private javax.swing.JComboBox comboBitsDatosGps;
    private javax.swing.JComboBox comboBitsDatosSonda;
    private javax.swing.JComboBox comboDistancia;
    private javax.swing.JComboBox comboParidadGps;
    private javax.swing.JComboBox comboParidadSonda;
    private javax.swing.JComboBox comboPuertoGps;
    private javax.swing.JComboBox comboPuertoSonda;
    private javax.swing.JComboBox comboTemp;
    private javax.swing.JComboBox comboVelocidad;
    private javax.swing.JComboBox comboVelocidadGps;
    private javax.swing.JComboBox comboVelocidadSonda;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXLabel lblBitsDatosGps;
    private org.jdesktop.swingx.JXLabel lblBitsDatosSonda;
    private org.jdesktop.swingx.JXLabel lblDispositivos;
    private org.jdesktop.swingx.JXLabel lblDistancia;
    private java.awt.Label lblGpsEstado;
    private org.jdesktop.swingx.JXLabel lblHistorico;
    private org.jdesktop.swingx.JXLabel lblLanEstado;
    private org.jdesktop.swingx.JXLabel lblParidadGps;
    private org.jdesktop.swingx.JXLabel lblParidadSonda;
    private org.jdesktop.swingx.JXLabel lblPuertoGps;
    private org.jdesktop.swingx.JXLabel lblPuertoSonda;
    private java.awt.Label lblSondaEstado;
    private org.jdesktop.swingx.JXLabel lblTemp;
    private org.jdesktop.swingx.JXLabel lblTitulo;
    private org.jdesktop.swingx.JXLabel lblTxtConfigGps;
    private org.jdesktop.swingx.JXLabel lblTxtConfigSonda;
    private org.jdesktop.swingx.JXLabel lblTxtRutaHistorico;
    private org.jdesktop.swingx.JXLabel lblUnidades;
    private org.jdesktop.swingx.JXLabel lblVelocidad;
    private org.jdesktop.swingx.JXLabel lblVelocidadGps;
    private org.jdesktop.swingx.JXLabel lblVelocidadSonda;
    private org.jdesktop.swingx.JXPanel panelBitsDeDatosGps;
    private org.jdesktop.swingx.JXPanel panelBitsDeDatosSonda;
    private org.jdesktop.swingx.JXPanel panelBotonGuardar;
    private org.jdesktop.swingx.JXPanel panelBtnConecta;
    private org.jdesktop.swingx.JXPanel panelBtnConectaGps;
    private org.jdesktop.swingx.JXPanel panelBtnConectaSonda;
    private org.jdesktop.swingx.JXPanel panelBtnEscanearPuertos;
    private org.jdesktop.swingx.JXPanel panelCampoRutaHistorico;
    private org.jdesktop.swingx.JXPanel panelComboBitsDatosGps;
    private org.jdesktop.swingx.JXPanel panelComboBitsDatosSonda;
    private org.jdesktop.swingx.JXPanel panelComboDistancia;
    private org.jdesktop.swingx.JXPanel panelComboIdioma;
    private org.jdesktop.swingx.JXPanel panelComboParidadGps;
    private org.jdesktop.swingx.JXPanel panelComboParidadSonda;
    private org.jdesktop.swingx.JXPanel panelComboPuertoGps;
    private org.jdesktop.swingx.JXPanel panelComboPuertoSonda;
    private org.jdesktop.swingx.JXPanel panelComboTemp;
    private org.jdesktop.swingx.JXPanel panelComboVelocidad;
    private org.jdesktop.swingx.JXPanel panelComboVelocidadGps;
    private org.jdesktop.swingx.JXPanel panelComboVelocidadSonda;
    private org.jdesktop.swingx.JXPanel panelConfigGps;
    private org.jdesktop.swingx.JXPanel panelConfigHistorico;
    private org.jdesktop.swingx.JXPanel panelConfigSonda;
    private org.jdesktop.swingx.JXPanel panelDispositivos;
    private org.jdesktop.swingx.JXPanel panelDistancia;
    private javax.swing.JPanel panelGPSconexionColor;
    private javax.swing.JPanel panelGPSconexionTxt;
    private org.jdesktop.swingx.JXPanel panelGeneralidades;
    private org.jdesktop.swingx.JXPanel panelGps;
    private javax.swing.JPanel panelGpsStatus;
    private org.jdesktop.swingx.JXPanel panelHistorico;
    private org.jdesktop.swingx.JXPanel panelIdioma;
    private javax.swing.JPanel panelLANconexionColor;
    private org.jdesktop.swingx.JXPanel panelLANconexionTxt;
    private javax.swing.JPanel panelLanStatus;
    private org.jdesktop.swingx.JXPanel panelOpcionesGrales;
    private org.jdesktop.swingx.JXPanel panelParidadGps;
    private org.jdesktop.swingx.JXPanel panelParidadSonda;
    private org.jdesktop.swingx.JXPanel panelPeces;
    private org.jdesktop.swingx.JXPanel panelPuertoComGps;
    private org.jdesktop.swingx.JXPanel panelPuertoComSonda;
    private org.jdesktop.swingx.JXPanel panelSonda;
    private javax.swing.JPanel panelSondaConexionColor;
    private javax.swing.JPanel panelSondaConexionTxt;
    private javax.swing.JPanel panelSondaStatus;
    private org.jdesktop.swingx.JXPanel panelTemperatura;
    private org.jdesktop.swingx.JXPanel panelTitulo;
    private org.jdesktop.swingx.JXPanel panelTituloBitsDatosGps;
    private org.jdesktop.swingx.JXPanel panelTituloBitsDatosSonda;
    private org.jdesktop.swingx.JXPanel panelTituloConfigGps;
    private org.jdesktop.swingx.JXPanel panelTituloConfigSonda;
    private org.jdesktop.swingx.JXPanel panelTituloParidadGps;
    private org.jdesktop.swingx.JXPanel panelTituloParidadSonda;
    private org.jdesktop.swingx.JXPanel panelTituloPuertoGps;
    private org.jdesktop.swingx.JXPanel panelTituloPuertoSonda;
    private org.jdesktop.swingx.JXPanel panelTituloRutaHistorico;
    private org.jdesktop.swingx.JXPanel panelTituloUnidades;
    private org.jdesktop.swingx.JXPanel panelTituloVelocidadGps;
    private org.jdesktop.swingx.JXPanel panelTituloVelocidadSonda;
    private org.jdesktop.swingx.JXPanel panelTodoLanStatus;
    private org.jdesktop.swingx.JXPanel panelTxtDispositivos;
    private org.jdesktop.swingx.JXPanel panelTxtDistancia;
    private org.jdesktop.swingx.JXPanel panelTxtIdioma;
    private org.jdesktop.swingx.JXPanel panelTxtTemp;
    private org.jdesktop.swingx.JXPanel panelTxtVelocidad;
    private org.jdesktop.swingx.JXPanel panelUnidades;
    private org.jdesktop.swingx.JXPanel panelVelocidad;
    private org.jdesktop.swingx.JXPanel panelVelocidadGps;
    private org.jdesktop.swingx.JXPanel panelVelocidadSonda;
    // End of variables declaration//GEN-END:variables

    public JTextField getCampoRutaHistorico() {
        return campoRutaHistorico;
    }

    public void setCampoRutaHistorico(JTextField campoRutaHistorico) {
        this.campoRutaHistorico = campoRutaHistorico;
    }

    public JCheckBox getChkEstadoDetectaPeces() {
        return chkEstadoDetectaPeces;
    }

    public void setChkEstadoDetectaPeces(JCheckBox chkEstadoDetectaPeces) {
        this.chkEstadoDetectaPeces = chkEstadoDetectaPeces;
    }

    public JCheckBox getChkEstadoGps() {
        return chkEstadoGps;
    }

    public void setChkEstadoGps(JCheckBox chkEstadoGps) {
        this.chkEstadoGps = chkEstadoGps;
    }

    public JCheckBox getChkEstadoSonda() {
        return chkEstadoSonda;
    }

    public void setChkEstadoSonda(JCheckBox chkEstadoSonda) {
        this.chkEstadoSonda = chkEstadoSonda;
    }

    public JCheckBox getChkHistoricoGps() {
        return chkHistoricoGps;
    }

    public void setChkHistoricoGps(JCheckBox chkHistoricoGps) {
        this.chkHistoricoGps = chkHistoricoGps;
    }

    public JCheckBox getChkHistoricoPeces() {
        return chkHistoricoPeces;
    }

    public void setChkHistoricoPeces(JCheckBox chkHistoricoPeces) {
        this.chkHistoricoPeces = chkHistoricoPeces;
    }

    public JCheckBox getChkHistoricoSonda() {
        return chkHistoricoSonda;
    }

    public void setChkHistoricoSonda(JCheckBox chkHistoricoSonda) {
        this.chkHistoricoSonda = chkHistoricoSonda;
    }

    public JCheckBox getChkHistoricoSondaSets() {
        return chkHistoricoSondaSets;
    }

    public void setChkHistoricoSondaSets(JCheckBox chkHistoricoSondaSets) {
        this.chkHistoricoSondaSets = chkHistoricoSondaSets;
    }

    public JComboBox getComboBitsDatosGps() {
        return comboBitsDatosGps;
    }

    public void setComboBitsDatosGps(JComboBox comboBitsDatosGps) {
        this.comboBitsDatosGps = comboBitsDatosGps;
    }

    public JComboBox getComboBitsDatosSonda() {
        return comboBitsDatosSonda;
    }

    public void setComboBitsDatosSonda(JComboBox comboBitsDatosSonda) {
        this.comboBitsDatosSonda = comboBitsDatosSonda;
    }

    public JComboBox getComboDistancia() {
        return comboDistancia;
    }

    public void setComboDistancia(JComboBox comboDistancia) {
        this.comboDistancia = comboDistancia;
    }

    public JComboBox getComboParidadGps() {
        return comboParidadGps;
    }

    public void setComboParidadGps(JComboBox comboParidadGps) {
        this.comboParidadGps = comboParidadGps;
    }

    public JComboBox getComboParidadSonda() {
        return comboParidadSonda;
    }

    public void setComboParidadSonda(JComboBox comboParidadSonda) {
        this.comboParidadSonda = comboParidadSonda;
    }

    public JComboBox getComboPuertoGps() {
        return comboPuertoGps;
    }

    public void setComboPuertoGps(JComboBox comboPuertoGps) {
        this.comboPuertoGps = comboPuertoGps;
    }

    public JComboBox getComboPuertoSonda() {
        return comboPuertoSonda;
    }

    public void setComboPuertoSonda(JComboBox comboPuertoSonda) {
        this.comboPuertoSonda = comboPuertoSonda;
    }

    public JComboBox getComboTemp() {
        return comboTemp;
    }

    public void setComboTemp(JComboBox comboTemp) {
        this.comboTemp = comboTemp;
    }

    public JComboBox getComboVelocidad() {
        return comboVelocidad;
    }

    public void setComboVelocidad(JComboBox comboVelocidad) {
        this.comboVelocidad = comboVelocidad;
    }

    public JComboBox getComboVelocidadGps() {
        return comboVelocidadGps;
    }

    public void setComboVelocidadGps(JComboBox comboVelocidadGps) {
        this.comboVelocidadGps = comboVelocidadGps;
    }

    public JComboBox getComboVelocidadSonda() {
        return comboVelocidadSonda;
    }

    public void setComboVelocidadSonda(JComboBox comboVelocidadSonda) {
        this.comboVelocidadSonda = comboVelocidadSonda;
    }

    public boolean leeDocYseteaPanelConfig_Gps(){
        boolean sePudo=false;
        //-- Actualiza la configuraci√≥n del panel segun lo que lea del Document
        try {
            Element raizConfiguracionIbape= BrokerConfig.getInstance().getDocBrokerConfig().getRootElement();
            Element parametros=raizConfiguracionIbape.getChild("Parametros");        
            
            getChkEstadoGps().setSelected(parametros.getChild("PanelConfiguracion-GPS").getAttribute("Estado").getBooleanValue());
            if (getChkEstadoGps().isSelected()){
                clickEnChkEstadoGps();
            }
            getComboPuertoGps().setSelectedItem(parametros.getChild("PanelConfiguracion-GPS").getAttributeValue("ComboPuerto"));
            getComboVelocidadGps().setSelectedItem(parametros.getChild("PanelConfiguracion-GPS").getAttributeValue("ComboVelocidad"));
            getComboBitsDatosGps().setSelectedItem(parametros.getChild("PanelConfiguracion-GPS").getAttributeValue("ComboBitsDatos"));
            getComboParidadGps().setSelectedItem(parametros.getChild("PanelConfiguracion-GPS").getAttributeValue("ComboParidad"));
            sePudo=true;
            }
        catch (Exception e) 
            {  Logueador.getInstance().agregaAlLog(e.toString()); }                
        return sePudo;
    }
    
    public boolean leeDocYseteaPanelConfig_Sonda(){
        boolean sePudo=false;
        //-- Actualiza la configuraci√≥n del panel segun lo que lea del Document
        try {
            Element raizConfiguracionIbape= BrokerConfig.getInstance().getDocBrokerConfig().getRootElement();
            Element parametros=raizConfiguracionIbape.getChild("Parametros");        
            getChkEstadoSonda().setSelected(parametros.getChild("PanelConfiguracion-Sonda").getAttribute("Estado").getBooleanValue());
            if (getChkEstadoSonda().isSelected()){
                clickEnChkEstadoSonda();
            }
            getComboPuertoSonda().setSelectedItem(parametros.getChild("PanelConfiguracion-Sonda").getAttributeValue("ComboPuerto"));
            getComboVelocidadSonda().setSelectedItem(parametros.getChild("PanelConfiguracion-Sonda").getAttributeValue("ComboVelocidad"));
            getComboBitsDatosSonda().setSelectedItem(parametros.getChild("PanelConfiguracion-Sonda").getAttributeValue("ComboBitsDatos"));
            getComboParidadSonda().setSelectedItem(parametros.getChild("PanelConfiguracion-Sonda").getAttributeValue("ComboParidad"));
            sePudo=true;
            }
        catch (Exception e) 
            {  Logueador.getInstance().agregaAlLog(e.toString()); }
        return sePudo;
    }
    
    public boolean leeDocYseteaPanelConfig_Lan(){
        boolean sePudo=false;
        //-- Actualiza la configuraci√≥n del panel segun lo que lea del Document
        try {
            Element raizConfiguracionIbape = BrokerConfig.getInstance().getDocBrokerConfig().getRootElement();
            Element parametros=raizConfiguracionIbape.getChild("Parametros");        
            getChkEstadoDetectaPeces().setSelected(parametros.getChild("PanelConfiguracion-LAN").getAttribute("Estado").getBooleanValue());
            if (getChkEstadoDetectaPeces().isSelected()){
                clickEnChkEstadoDetectaPeces();
            }
            getCampoRutaHistorico().setText(parametros.getChild("PanelConfiguracion-LAN").getAttributeValue("ruta"));
            sePudo=true;
            }
        catch (Exception e) 
            {  Logueador.getInstance().agregaAlLog(e.toString()); }
        return sePudo;
    }    

    public boolean leeDocYseteaPanelConfig_Unidades(){
        boolean sePudo=false;
        //-- Actualiza la configuraci√≥n del panel segun lo que lea del Document
        try {
            Element raizConfiguracionIbape= BrokerConfig.getInstance().getDocBrokerConfig().getRootElement();
            Element parametros=raizConfiguracionIbape.getChild("Parametros");        
            getComboDistancia().setSelectedItem(parametros.getChild("PanelConfiguracion-Unidades").getAttributeValue("ComboDistancia"));
            getComboVelocidad().setSelectedItem(parametros.getChild("PanelConfiguracion-Unidades").getAttributeValue("ComboVelocidad"));
            getComboTemp().setSelectedItem(parametros.getChild("PanelConfiguracion-Unidades").getAttributeValue("ComboTemp"));
            sePudo=true;
            }
        catch (Exception e) 
            {  Logueador.getInstance().agregaAlLog(e.toString()); }
        return sePudo;
    }    

    public boolean leeDocYseteaPanelConfig_Historico(){
        boolean sePudo=false;
        //-- Actualiza los campos que corresponden del Document
        try {
            Element raizConfiguracionIbape= BrokerConfig.getInstance().getDocBrokerConfig().getRootElement();
            Element parametros=raizConfiguracionIbape.getChild("Parametros");        
            getChkHistoricoGps().setSelected(parametros.getChild("PanelConfiguracion-Historico").getAttribute("GuardarDatosGps").getBooleanValue());
            if (getChkHistoricoGps().isSelected()){
                clickEnChkHistoricoGps();
            }
            getChkHistoricoSonda().setSelected(parametros.getChild("PanelConfiguracion-Historico").getAttribute("GuardarDatosSonda").getBooleanValue());
            getChkHistoricoPeces().setSelected(parametros.getChild("PanelConfiguracion-Historico").getAttribute("GuardarDatosProcImg").getBooleanValue());
            getChkHistoricoSondaSets().setSelected(parametros.getChild("PanelConfiguracion-Historico").getAttribute("GuardarDatosConfigSonda").getBooleanValue());
            sePudo=true;
            }
        catch (Exception e) 
            {  Logueador.getInstance().agregaAlLog(e.toString()); }
        return sePudo;
    }    
    
    private boolean leeDocYseteaConfiguraciones(){
       boolean sePudo=true; 
       sePudo=sePudo && leeDocYseteaPanelConfig_Gps() && leeDocYseteaPanelConfig_Historico();
       sePudo=sePudo && leeDocYseteaPanelConfig_Lan() && leeDocYseteaPanelConfig_Sonda();
       sePudo=sePudo && leeDocYseteaPanelConfig_Unidades();
       return sePudo;
    }    
    
    private void setPanelConfigGps(boolean estado) {
        //Activo el panel de configuraci√≥n del GPS
        lblTxtConfigGps.setEnabled(estado);
        lblPuertoGps.setEnabled(estado);
        comboPuertoGps.setEnabled(estado);
        lblBitsDatosGps.setEnabled(estado);
        comboBitsDatosGps.setEnabled(estado);
        lblVelocidadGps.setEnabled(estado);
        comboVelocidadGps.setEnabled(estado);
        lblParidadGps.setEnabled(estado);
        comboParidadGps.setEnabled(estado); 
        btnConectaGps.setEnabled(estado);
        GpsEstado.setEnabled(estado);
        lblGpsEstado.setEnabled(estado);
    }
    
    private void setPanelConfigSonda(boolean estado) {
        //Activo el panel de configuraci√≥n de la Sonda
        lblTxtConfigSonda.setEnabled(estado);
        lblPuertoSonda.setEnabled(estado);
        comboPuertoSonda.setEnabled(estado);
        lblBitsDatosSonda.setEnabled(estado);
        comboBitsDatosSonda.setEnabled(estado);
        lblVelocidadSonda.setEnabled(estado);
        comboVelocidadSonda.setEnabled(estado);
        lblParidadSonda.setEnabled(estado);
        comboParidadSonda.setEnabled(estado);         
        btnConectaSonda.setEnabled(estado);
        SondaEstado.setEnabled(estado);
        lblSondaEstado.setEnabled(estado);        
    }
    
    private void setPanelConfigLan(boolean estado) {
        //Activo el panel de configuraci√≥n LAN de la Sonda
        lblTxtRutaHistorico.setEnabled(estado);
        campoRutaHistorico.setEnabled(estado);
        btnExaminarRutaHistorico.setEnabled(estado);
        btnPruebaLan.setEnabled(estado);
        LanEstado.setEnabled(estado);
        lblLanEstado.setEnabled(estado);        
    }

  
    public static PanelOpcConfiguracion getInstance() {
       if (unicaInstancia == null) {
          unicaInstancia = new PanelOpcConfiguracion();          
       }       
       return unicaInstancia;
    }    
    
    public void clickEnChkEstadoGps() {
        if (chkEstadoGps.isSelected()) {
            chkEstadoGps.setSelected(true);
            setPanelConfigGps(true);//Desactivo el panel de configuraci√≥n del GPS        
            chkEstadoSonda.setEnabled(true);   
        }
        else
        {   
            chkEstadoGps.setSelected(false);
            setPanelConfigGps(false);//Desactivo el panel de configuraci√≥n del GPS        
            chkEstadoSonda.setEnabled(false);
            chkEstadoSonda.setSelected(false);
            setPanelConfigSonda(false);//Desactivo el panel de configuraci√≥n del GPS        
            chkEstadoDetectaPeces.setEnabled(false);
            chkEstadoDetectaPeces.setSelected(false);
            setPanelConfigLan(false);//Desactivo el panel de configuraci√≥n del GPS        
        }        
    }
    
    
    public void clickEnChkEstadoSonda() {
        if (chkEstadoSonda.isSelected()) {
            chkEstadoSonda.setSelected(true);
            setPanelConfigSonda(true);//Desactivo el panel de configuraci√≥n de la Sonda        
            chkEstadoDetectaPeces.setEnabled(true);
        }
        else
        {           
            chkEstadoSonda.setSelected(false);
            setPanelConfigSonda(false);//Desactivo el panel de configuraci√≥n de la Sonda        
            chkEstadoDetectaPeces.setEnabled(false);
            chkEstadoDetectaPeces.setSelected(false);
            setPanelConfigLan(false);//Desactivo el panel de configuraci√≥n de LAN
        }           
    }
    
    public void clickEnChkEstadoDetectaPeces(){
        if (chkEstadoDetectaPeces.isSelected()) {
            chkEstadoDetectaPeces.setSelected(true);
            setPanelConfigLan(true);//Desactivo el panel de configuraci√≥n de la Sonda
        }
        else
        {           
            chkEstadoDetectaPeces.setSelected(false);
            setPanelConfigLan(false);//Desactivo el panel de configuraci√≥n Lan        
        }        
    }
    
    public void clickEnChkHistoricoGps(){
        if (chkHistoricoGps.isSelected()) {
            chkHistoricoGps.setSelected(true);
            chkHistoricoSonda.setEnabled(true);
            chkHistoricoSondaSets.setEnabled(true);
            chkHistoricoPeces.setEnabled(true);
        }
        else
        {   
            chkHistoricoGps.setSelected(false);
            chkHistoricoSonda.setEnabled(false);
            chkHistoricoSondaSets.setEnabled(false);
            chkHistoricoPeces.setEnabled(false);        
        }        
    }
        
    public void setGpsDesconectado(){
        GpsEstado.setBackground(Color.red);
        lblGpsEstado.setText("Desconectado");
    }
    
    public void setGpsConectando(){
        GpsEstado.setBackground(Color.orange);
        lblGpsEstado.setText("Conectando...");        
    }
    
    public void setGpsConectado(){
        GpsEstado.setBackground(Color.green);
        lblGpsEstado.setText("Conectado");                
    }

    public void setSondaDesconectado(){
        SondaEstado.setBackground(Color.red);
        lblSondaEstado.setText("Desconectado");
    }
    
    public void setSondaConectando(){
        SondaEstado.setBackground(Color.orange);
        lblSondaEstado.setText("Conectando...");        
    }
    
    public void setSondaConectado(){
        SondaEstado.setBackground(Color.green);
        lblSondaEstado.setText("Conectado");                
    }    
    
    
/* codigo de prueba para poder probar un panel simplemente haciendo "Run File" sobre su clase
     public static void main(String[] args) {
        javax.swing.JFrame elFrame = new javax.swing.JFrame();
        elFrame.setSize(500, 500);
        elFrame.add(new PanelOpcConfiguracion()); 
        elFrame.setVisible(true);
    }
*/

    public void habilitaBtnConectaGps() {
        btnConectaGps.setVisible(true);
        btnDesconectaGps.setVisible(false);
        chkEstadoGps.setEnabled(true);
        setPanelConfigGps(true);
    }

    public void habilitaBtnConectaSonda() {
        btnConectaSonda.setVisible(true);
        btnDesconectaSonda.setVisible(false);
        chkEstadoSonda.setEnabled(true);
        setPanelConfigSonda(true);
    }

    public void setContenidoComboCOMgps(ArrayList<String> elementos){
        comboPuertoGps.removeAllItems();
        int i=0;
        if (elementos.size()==1) { comboPuertoGps.setToolTipText(elementos.get(i)); }
        while (i<elementos.size()){
            comboPuertoGps.addItem(elementos.get(i));
            i++;
        }        
    }
    
    public void setContenidoComboCOMsonda(ArrayList<String> elementos){
        comboPuertoSonda.removeAllItems();
        int i=0;
        if (elementos.size()==1) { comboPuertoSonda.setToolTipText(elementos.get(i)); }
        while (i<elementos.size()){
            comboPuertoSonda.addItem(elementos.get(i));
            i++;
        }        
    }

    public void btnEscanearPuertosPresionado(boolean presionado) {
        if (presionado){
            btnEscaneaPuertos.setText("Buscando puertos...");
            btnEscaneaPuertos.setToolTipText("Actualizando lista de puertos...");
            btnEscaneaPuertos.setEnabled(false);
        }
        else{
            btnEscaneaPuertos.setText("Actualizar puertos COM");
            btnEscaneaPuertos.setToolTipText("Busca todos los puertos serie de esta computadora");
            btnEscaneaPuertos.setEnabled(true);            
        }
            
    }
}