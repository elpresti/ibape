/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelOpcPOIs.java
 *
 * Created on 19/04/2012, 01:46:19
 */
package gui;

import controllers.ControllerNavegacion;
import controllers.ControllerPpal;
import controllers.RenderCombo;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.dataManager.CategoriaPoi;
import modelo.dataManager.POI;
import persistencia.BrokerCategoriasPOI;
import persistencia.BrokerPOIs;
import persistencia.BrokerPpal;

/**
 *
 * @author Sebastian
 */
public class PanelOpcPOIs extends javax.swing.JPanel {

    static PanelOpcPOIs unicaInstancia;
    private boolean modificandoPOI;
    private boolean modificandoCatPOI;
    private DefaultTableModel modeloTablaPOIS = new javax.swing.table.DefaultTableModel(
            new Object[][]{},
            new String[]{
                "id", "Fecha y Hora", "Categoria", "Coordenadas", "Descripcion", "Acciones"
            }) {

        Class[] types = new Class[]{
            java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
        };

        @Override
        public Class getColumnClass(int columnIndex) {
            return types[columnIndex];
        }
    };
    private DefaultTableModel modeloTablaCategoriasPOI = new javax.swing.table.DefaultTableModel(
            new Object[][]{},
            new String[]{
                "id", "Nombre de Categoria", "Icono", "Acciones"
            }) {

        Class[] types = new Class[]{
            java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
        };

        @Override
        public Class getColumnClass(int columnIndex) {
            return types[columnIndex];
        }
    };
    ;
    
    private POI tempPOI;
    private CategoriaPoi tempCatPOI;

    /** Creates new form PanelOpcPOIs */
    private PanelOpcPOIs() {
        initComponents();
        inicializador();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        panelTodo = new org.jdesktop.swingx.JXPanel();
        panelTitulo = new org.jdesktop.swingx.JXPanel();
        lblTitulo = new org.jdesktop.swingx.JXLabel();
        panelPois = new org.jdesktop.swingx.JXPanel();
        panelPoisTitulo = new org.jdesktop.swingx.JXPanel();
        lblTituloTablaPois = new org.jdesktop.swingx.JXLabel();
        panelTablaPois = new org.jdesktop.swingx.JXPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPois = new org.jdesktop.swingx.JXTable();
        panelSurPois = new org.jdesktop.swingx.JXPanel();
        panelAccionesPOIElegido = new org.jdesktop.swingx.JXPanel();
        lblAccionesPOI = new org.jdesktop.swingx.JXLabel();
        panelAcciones = new org.jdesktop.swingx.JXPanel();
        btnModificarPOI = new org.jdesktop.swingx.JXHyperlink();
        btnGuardarPOI = new org.jdesktop.swingx.JXHyperlink();
        btnEliminarPOI = new org.jdesktop.swingx.JXHyperlink();
        btnInsertarPOI = new org.jdesktop.swingx.JXHyperlink();
        panelDatosPoi = new org.jdesktop.swingx.JXPanel();
        panelLatitud = new org.jdesktop.swingx.JXPanel();
        lblLatitud = new org.jdesktop.swingx.JXLabel();
        campoLatitud = new javax.swing.JTextField();
        panelLongitud = new org.jdesktop.swingx.JXPanel();
        lblLongitud = new org.jdesktop.swingx.JXLabel();
        campoLongitud = new javax.swing.JTextField();
        panelCatNuevoPoi = new org.jdesktop.swingx.JXPanel();
        lblCategoria = new org.jdesktop.swingx.JXLabel();
        comboCategorias = new javax.swing.JComboBox();
        panelDescripNuevoPoi = new org.jdesktop.swingx.JXPanel();
        lblDescripciónNuevoPoi = new org.jdesktop.swingx.JXLabel();
        campoDescripcionNuevoPoi = new javax.swing.JTextField();
        panelCategoriaPois = new org.jdesktop.swingx.JXPanel();
        panelCatTitulo = new org.jdesktop.swingx.JXPanel();
        lblTituloTablaCategorias = new org.jdesktop.swingx.JXLabel();
        panelTablaCategorias = new org.jdesktop.swingx.JXPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaCategorias = new org.jdesktop.swingx.JXTable();
        panelSurCatPois = new org.jdesktop.swingx.JXPanel();
        panelAccionesCatPOIElegido = new org.jdesktop.swingx.JXPanel();
        lblAccionesCampania1 = new org.jdesktop.swingx.JXLabel();
        panelAcciones1 = new org.jdesktop.swingx.JXPanel();
        btnModificarCatPOI = new org.jdesktop.swingx.JXHyperlink();
        btnGuardarCatPOI = new org.jdesktop.swingx.JXHyperlink();
        btnEliminaCatPOI = new org.jdesktop.swingx.JXHyperlink();
        btnInsertarCatPOI = new org.jdesktop.swingx.JXHyperlink();
        panelAgregaCategoria = new org.jdesktop.swingx.JXPanel();
        panelNombreNuevaCat = new org.jdesktop.swingx.JXPanel();
        lblNombreNuevaCat = new org.jdesktop.swingx.JXLabel();
        campoNombreNuevaCat = new javax.swing.JTextField();
        lblIconoCatPoi = new org.jdesktop.swingx.JXLabel();
        comboIconoCatPoi = new javax.swing.JComboBox();

        setMaximumSize(new java.awt.Dimension(500, 500));
        setMinimumSize(new java.awt.Dimension(500, 500));
        setPreferredSize(new java.awt.Dimension(520, 500));
        setLayout(new java.awt.BorderLayout());

        jScrollPane3.setAutoscrolls(true);
        jScrollPane3.setPreferredSize(new java.awt.Dimension(520, 500));

        panelTodo.setMinimumSize(new java.awt.Dimension(400, 360));
        panelTodo.setPreferredSize(new java.awt.Dimension(500, 670));
        panelTodo.setScrollableTracksViewportHeight(false);
        panelTodo.setScrollableTracksViewportWidth(false);

        panelTitulo.setMaximumSize(new java.awt.Dimension(500, 40));
        panelTitulo.setMinimumSize(new java.awt.Dimension(500, 40));
        panelTitulo.setPreferredSize(new java.awt.Dimension(500, 40));

        lblTitulo.setText("Administración de Puntos de Interes (POI)");
        lblTitulo.setFont(new java.awt.Font("Arial", 0, 18));
        panelTitulo.add(lblTitulo);

        panelTodo.add(panelTitulo);

        panelPois.setMaximumSize(new java.awt.Dimension(500, 400));
        panelPois.setMinimumSize(new java.awt.Dimension(500, 400));
        panelPois.setPreferredSize(new java.awt.Dimension(500, 400));
        panelPois.setLayout(new java.awt.BorderLayout());

        panelPoisTitulo.setMaximumSize(new java.awt.Dimension(500, 30));
        panelPoisTitulo.setMinimumSize(new java.awt.Dimension(500, 30));
        panelPoisTitulo.setPreferredSize(new java.awt.Dimension(500, 30));
        panelPoisTitulo.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lblTituloTablaPois.setText("Listado de POIs:");
        lblTituloTablaPois.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelPoisTitulo.add(lblTituloTablaPois);

        panelPois.add(panelPoisTitulo, java.awt.BorderLayout.NORTH);

        panelTablaPois.setMaximumSize(new java.awt.Dimension(500, 200));
        panelTablaPois.setMinimumSize(new java.awt.Dimension(500, 200));
        panelTablaPois.setPreferredSize(new java.awt.Dimension(500, 200));
        panelTablaPois.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        jScrollPane1.setMaximumSize(new java.awt.Dimension(500, 250));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(500, 250));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 200));

        tablaPois.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Fecha y Hora", "Categoria", "Coordenadas", "Descripcion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaPois);
        tablaPois.getColumnModel().getColumn(0).setMinWidth(70);
        tablaPois.getColumnModel().getColumn(0).setPreferredWidth(70);

        panelTablaPois.add(jScrollPane1);

        panelPois.add(panelTablaPois, java.awt.BorderLayout.CENTER);

        panelSurPois.setMaximumSize(new java.awt.Dimension(500, 170));
        panelSurPois.setMinimumSize(new java.awt.Dimension(500, 170));
        panelSurPois.setPreferredSize(new java.awt.Dimension(500, 170));

        panelAccionesPOIElegido.setMaximumSize(new java.awt.Dimension(450, 30));
        panelAccionesPOIElegido.setMinimumSize(new java.awt.Dimension(450, 30));
        panelAccionesPOIElegido.setPreferredSize(new java.awt.Dimension(450, 30));
        panelAccionesPOIElegido.setLayout(new java.awt.GridLayout(1, 2));

        lblAccionesPOI.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccionesPOI.setText("Acciones sobre los POIs elegidos:");
        lblAccionesPOI.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelAccionesPOIElegido.add(lblAccionesPOI);

        panelAcciones.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 20, 5));

        btnModificarPOI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/tabla-icono-editar.png"))); // NOI18N
        btnModificarPOI.setText("");
        btnModificarPOI.setToolTipText("Modificar");
        btnModificarPOI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnModificarPOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarPOIActionPerformed(evt);
            }
        });
        panelAcciones.add(btnModificarPOI);

        btnGuardarPOI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/tabla-icono-guardar.png"))); // NOI18N
        btnGuardarPOI.setText("");
        btnGuardarPOI.setToolTipText("Guardar cambios");
        btnGuardarPOI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnGuardarPOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarPOIActionPerformed(evt);
            }
        });
        panelAcciones.add(btnGuardarPOI);

        btnEliminarPOI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/tabla-icono-eliminar.png"))); // NOI18N
        btnEliminarPOI.setText("");
        btnEliminarPOI.setToolTipText("Eliminar");
        btnEliminarPOI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnEliminarPOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarPOIActionPerformed(evt);
            }
        });
        panelAcciones.add(btnEliminarPOI);

        btnInsertarPOI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/tabla-icono-insertar.png"))); // NOI18N
        btnInsertarPOI.setText("");
        btnInsertarPOI.setToolTipText("Agregar");
        btnInsertarPOI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnInsertarPOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarPOIActionPerformed(evt);
            }
        });
        panelAcciones.add(btnInsertarPOI);

        panelAccionesPOIElegido.add(panelAcciones);

        panelSurPois.add(panelAccionesPOIElegido);

        panelDatosPoi.setMaximumSize(new java.awt.Dimension(500, 150));
        panelDatosPoi.setMinimumSize(new java.awt.Dimension(500, 150));
        panelDatosPoi.setPreferredSize(new java.awt.Dimension(500, 150));
        panelDatosPoi.setLayout(new java.awt.GridLayout(5, 1));

        lblLatitud.setText("Latitud ");
        lblLatitud.setFont(new java.awt.Font("Tahoma", 0, 12));
        panelLatitud.add(lblLatitud);

        campoLatitud.setMaximumSize(new java.awt.Dimension(100, 20));
        campoLatitud.setMinimumSize(new java.awt.Dimension(100, 20));
        campoLatitud.setPreferredSize(new java.awt.Dimension(100, 20));
        panelLatitud.add(campoLatitud);

        panelDatosPoi.add(panelLatitud);

        lblLongitud.setText("Longitud");
        lblLongitud.setFont(new java.awt.Font("Tahoma", 0, 12));
        panelLongitud.add(lblLongitud);

        campoLongitud.setMaximumSize(new java.awt.Dimension(100, 20));
        campoLongitud.setMinimumSize(new java.awt.Dimension(100, 20));
        campoLongitud.setPreferredSize(new java.awt.Dimension(100, 20));
        panelLongitud.add(campoLongitud);

        panelDatosPoi.add(panelLongitud);

        panelCatNuevoPoi.setMaximumSize(new java.awt.Dimension(500, 30));
        panelCatNuevoPoi.setMinimumSize(new java.awt.Dimension(500, 30));
        panelCatNuevoPoi.setPreferredSize(new java.awt.Dimension(500, 30));

        lblCategoria.setText("Categoria");
        lblCategoria.setFont(new java.awt.Font("Tahoma", 0, 12));
        panelCatNuevoPoi.add(lblCategoria);

        comboCategorias.setFont(new java.awt.Font("Tahoma", 0, 12));
        comboCategorias.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Red rota", "Buen Abadejo", "Fondo rocoso" }));
        comboCategorias.setMaximumSize(new java.awt.Dimension(130, 20));
        comboCategorias.setMinimumSize(new java.awt.Dimension(130, 20));
        comboCategorias.setPreferredSize(new java.awt.Dimension(130, 20));
        comboCategorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCategoriasActionPerformed(evt);
            }
        });
        panelCatNuevoPoi.add(comboCategorias);

        panelDatosPoi.add(panelCatNuevoPoi);

        panelDescripNuevoPoi.setMaximumSize(new java.awt.Dimension(500, 30));
        panelDescripNuevoPoi.setMinimumSize(new java.awt.Dimension(500, 30));
        panelDescripNuevoPoi.setPreferredSize(new java.awt.Dimension(500, 30));

        lblDescripciónNuevoPoi.setText("Descripción");
        lblDescripciónNuevoPoi.setFont(new java.awt.Font("Tahoma", 0, 12));
        panelDescripNuevoPoi.add(lblDescripciónNuevoPoi);

        campoDescripcionNuevoPoi.setMaximumSize(new java.awt.Dimension(200, 20));
        campoDescripcionNuevoPoi.setMinimumSize(new java.awt.Dimension(200, 20));
        campoDescripcionNuevoPoi.setPreferredSize(new java.awt.Dimension(200, 20));
        panelDescripNuevoPoi.add(campoDescripcionNuevoPoi);

        panelDatosPoi.add(panelDescripNuevoPoi);

        panelSurPois.add(panelDatosPoi);

        panelPois.add(panelSurPois, java.awt.BorderLayout.SOUTH);

        panelTodo.add(panelPois);

        panelCategoriaPois.setMaximumSize(new java.awt.Dimension(500, 300));
        panelCategoriaPois.setMinimumSize(new java.awt.Dimension(500, 300));
        panelCategoriaPois.setPreferredSize(new java.awt.Dimension(500, 300));
        panelCategoriaPois.setScrollableTracksViewportHeight(false);
        panelCategoriaPois.setScrollableTracksViewportWidth(false);
        panelCategoriaPois.setLayout(new java.awt.BorderLayout());

        panelCatTitulo.setMaximumSize(new java.awt.Dimension(500, 30));
        panelCatTitulo.setMinimumSize(new java.awt.Dimension(500, 30));
        panelCatTitulo.setPreferredSize(new java.awt.Dimension(500, 30));
        panelCatTitulo.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lblTituloTablaCategorias.setText("Categorías de POIs:");
        lblTituloTablaCategorias.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelCatTitulo.add(lblTituloTablaCategorias);

        panelCategoriaPois.add(panelCatTitulo, java.awt.BorderLayout.NORTH);

        panelTablaCategorias.setMaximumSize(new java.awt.Dimension(500, 200));
        panelTablaCategorias.setMinimumSize(new java.awt.Dimension(500, 200));
        panelTablaCategorias.setPreferredSize(new java.awt.Dimension(500, 200));
        panelTablaCategorias.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        jScrollPane2.setMaximumSize(new java.awt.Dimension(500, 200));
        jScrollPane2.setMinimumSize(new java.awt.Dimension(500, 200));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(500, 200));

        tablaCategorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nombre de Categoria", "Icono"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaCategorias.setMaximumSize(new java.awt.Dimension(500, 200));
        tablaCategorias.setMinimumSize(new java.awt.Dimension(500, 200));
        tablaCategorias.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 200));
        tablaCategorias.setPreferredSize(new java.awt.Dimension(500, 200));
        jScrollPane2.setViewportView(tablaCategorias);
        tablaCategorias.getColumnModel().getColumn(1).setMinWidth(50);
        tablaCategorias.getColumnModel().getColumn(1).setPreferredWidth(50);
        tablaCategorias.getColumnModel().getColumn(1).setMaxWidth(50);

        panelTablaCategorias.add(jScrollPane2);

        panelCategoriaPois.add(panelTablaCategorias, java.awt.BorderLayout.CENTER);

        panelSurCatPois.setMaximumSize(new java.awt.Dimension(500, 170));
        panelSurCatPois.setMinimumSize(new java.awt.Dimension(500, 170));
        panelSurCatPois.setPreferredSize(new java.awt.Dimension(500, 170));

        panelAccionesCatPOIElegido.setMaximumSize(new java.awt.Dimension(450, 30));
        panelAccionesCatPOIElegido.setMinimumSize(new java.awt.Dimension(450, 30));
        panelAccionesCatPOIElegido.setPreferredSize(new java.awt.Dimension(450, 30));
        panelAccionesCatPOIElegido.setLayout(new java.awt.GridLayout(1, 2));

        lblAccionesCampania1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccionesCampania1.setText("Acciones sobre la categoria elegida:");
        lblAccionesCampania1.setFont(new java.awt.Font("Tahoma", 0, 14));
        panelAccionesCatPOIElegido.add(lblAccionesCampania1);

        panelAcciones1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 20, 5));

        btnModificarCatPOI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/tabla-icono-editar.png"))); // NOI18N
        btnModificarCatPOI.setText("");
        btnModificarCatPOI.setToolTipText("Modificar");
        btnModificarCatPOI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnModificarCatPOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarCatPOIActionPerformed(evt);
            }
        });
        panelAcciones1.add(btnModificarCatPOI);

        btnGuardarCatPOI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/tabla-icono-guardar.png"))); // NOI18N
        btnGuardarCatPOI.setText("");
        btnGuardarCatPOI.setToolTipText("Guardar cambios");
        btnGuardarCatPOI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnGuardarCatPOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCatPOIActionPerformed(evt);
            }
        });
        panelAcciones1.add(btnGuardarCatPOI);

        btnEliminaCatPOI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/tabla-icono-eliminar.png"))); // NOI18N
        btnEliminaCatPOI.setText("");
        btnEliminaCatPOI.setToolTipText("Eliminar");
        btnEliminaCatPOI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnEliminaCatPOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminaCatPOIActionPerformed(evt);
            }
        });
        panelAcciones1.add(btnEliminaCatPOI);

        btnInsertarCatPOI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/tabla-icono-insertar.png"))); // NOI18N
        btnInsertarCatPOI.setText("");
        btnInsertarCatPOI.setToolTipText("Eliminar");
        btnInsertarCatPOI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnInsertarCatPOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarCatPOIActionPerformed(evt);
            }
        });
        panelAcciones1.add(btnInsertarCatPOI);

        panelAccionesCatPOIElegido.add(panelAcciones1);

        panelSurCatPois.add(panelAccionesCatPOIElegido);

        panelAgregaCategoria.setMaximumSize(new java.awt.Dimension(500, 60));
        panelAgregaCategoria.setMinimumSize(new java.awt.Dimension(500, 60));
        panelAgregaCategoria.setPreferredSize(new java.awt.Dimension(500, 60));
        panelAgregaCategoria.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        panelNombreNuevaCat.setMaximumSize(new java.awt.Dimension(500, 30));
        panelNombreNuevaCat.setMinimumSize(new java.awt.Dimension(500, 30));
        panelNombreNuevaCat.setPreferredSize(new java.awt.Dimension(500, 30));
        panelNombreNuevaCat.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        lblNombreNuevaCat.setText("Nombre");
        lblNombreNuevaCat.setFont(new java.awt.Font("Tahoma", 0, 12));
        panelNombreNuevaCat.add(lblNombreNuevaCat);

        campoNombreNuevaCat.setMaximumSize(new java.awt.Dimension(170, 20));
        campoNombreNuevaCat.setMinimumSize(new java.awt.Dimension(170, 20));
        campoNombreNuevaCat.setPreferredSize(new java.awt.Dimension(170, 20));
        panelNombreNuevaCat.add(campoNombreNuevaCat);

        lblIconoCatPoi.setText("Icono");
        panelNombreNuevaCat.add(lblIconoCatPoi);

        comboIconoCatPoi.setMaximumSize(new java.awt.Dimension(130, 20));
        comboIconoCatPoi.setMinimumSize(new java.awt.Dimension(130, 20));
        comboIconoCatPoi.setPreferredSize(new java.awt.Dimension(130, 20));
        panelNombreNuevaCat.add(comboIconoCatPoi);

        panelAgregaCategoria.add(panelNombreNuevaCat);

        panelSurCatPois.add(panelAgregaCategoria);

        panelCategoriaPois.add(panelSurCatPois, java.awt.BorderLayout.SOUTH);

        panelTodo.add(panelCategoriaPois);

        jScrollPane3.setViewportView(panelTodo);

        add(jScrollPane3, java.awt.BorderLayout.LINE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void comboCategoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCategoriasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboCategoriasActionPerformed

    private void btnModificarCatPOIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarCatPOIActionPerformed
        habilitaPanelDatosCatPOIs(true);
        setModificandoCatPOI(true);
        btnEliminaCatPOI.setEnabled(false);
        btnInsertarCatPOI.setEnabled(false);
        btnModificarCatPOI.setEnabled(false);
        btnGuardarCatPOI.setEnabled(true);
        //cargo la fila seleccionada en el formulario
        int i = 0;
        while (!(Boolean) tablaCategorias.getValueAt(i, tablaCategorias.getColumnCount(false) - 1) && i < tablaCategorias.getRowCount() - 1) {
            i++;
        }
        if ((Boolean) tablaCategorias.getValueAt(i, tablaCategorias.getColumnCount(false) - 1)) {
            CategoriaPoi unaCatPOI = (CategoriaPoi) tablaCategorias.getValueAt(i, 1);
            campoNombreNuevaCat.setText(unaCatPOI.getTitulo());
            //ver el icono
            setTempCatPOI(unaCatPOI);
        } else {
            habilitaPanelDatosCatPOIs(false);
            setModificandoCatPOI(false);
            JOptionPane.showMessageDialog(null, "Seleccione una Categoria de POI primero");
        }
    }//GEN-LAST:event_btnModificarCatPOIActionPerformed

    private void btnGuardarCatPOIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCatPOIActionPerformed
//verif si esta repetido
        boolean unico = true;
        int i = 0;
        while (i < comboCategorias.getItemCount() && unico) {
            if (comboCategorias.getItemAt(i).toString().toUpperCase().equals(campoDescripcionNuevoPoi.getText().toUpperCase())) {
                unico = false;
            }
            i++;
        }

        if (modificandoCatPOI && unico) {
        } else {//nuevo
            // Agrega Categoria POI:
            if (unico && campoNombreNuevaCat.getText().length() > 2) {
                controllers.ControllerPois.getInstance().agregaCategoriaPOI(campoNombreNuevaCat.getText(), comboIconoCatPoi.getSelectedItem().toString());

            } else {
                JOptionPane.showMessageDialog(null, "El nombre  de la categoria no es valido");
            }
        }
        cargaGrillaCategoriaPOIS();
        cargaComboCategorias();
    }//GEN-LAST:event_btnGuardarCatPOIActionPerformed

    private void btnEliminaCatPOIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminaCatPOIActionPerformed
        if (JOptionPane.showConfirmDialog(null,
                "Desea eliminar las Categorias de POIs seleccionadas?",
                "Eliminar Categorias de POIs",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE) == 0) {
            for (int i = 0; i < tablaCategorias.getRowCount(); i++) {
                if ((Boolean) tablaCategorias.getValueAt(i, tablaCategorias.getColumnCount(false) - 1)) {
                    controllers.ControllerPois.getInstance().eliminaCategoriaPOI((CategoriaPoi) tablaCategorias.getValueAt(i, 1));
                }
            }
        }
        cargaGrillaCategoriaPOIS();
        cargaComboCategorias();
    }//GEN-LAST:event_btnEliminaCatPOIActionPerformed

    private void btnInsertarCatPOIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarCatPOIActionPerformed
        // Inserta nueva cat. poi
        habilitaPanelDatosCatPOIs(true);
        btnModificarCatPOI.setEnabled(false);
        btnEliminaCatPOI.setEnabled(false);
        btnInsertarCatPOI.setEnabled(false);
        btnGuardarCatPOI.setEnabled(true);
    }//GEN-LAST:event_btnInsertarCatPOIActionPerformed

    private void btnInsertarPOIActionPerformed(java.awt.event.ActionEvent evt) {
        //INSERTA un POI
        habilitaPanelDatosPOIs(true);
        btnModificarPOI.setEnabled(false);
        btnEliminarPOI.setEnabled(false);
        btnInsertarPOI.setEnabled(false);
        btnGuardarPOI.setEnabled(true);
        /*Este es el codigo de resgistra POI
         * habilitaPanelDatosPOIs(true);
        campoLatitud.setText(String.valueOf(ControllerNavegacion.getInstance().getLatitudActual()));
        campoLatitud.setEnabled(false);//no lo puedo modificar
        campoLongitud.setText(String.valueOf(ControllerNavegacion.getInstance().getLongitudActual()));
        campoLongitud.setEnabled(false);//no lo puedo modificar
        //controlaPanelNuevaCondicion(true);
        setModificandoPOI(false);*/
    }

    private void btnModificarPOIActionPerformed(java.awt.event.ActionEvent evt) {
        habilitaPanelDatosPOIs(true);
        setModificandoPOI(true);
        btnEliminarPOI.setEnabled(false);
        btnInsertarPOI.setEnabled(false);
        btnModificarPOI.setEnabled(false);
        btnGuardarPOI.setEnabled(true);
        //cargo la fila seleccionada en el formulario
        int i = 0;
        while (!(Boolean) tablaPois.getValueAt(i, tablaPois.getColumnCount(false) - 1) && i < tablaPois.getRowCount() - 1) {
            i++;
        }
        if ((Boolean) tablaPois.getValueAt(i, tablaPois.getColumnCount(false) - 1)) {
            POI unPOI = (POI) tablaPois.getValueAt(i, 0);
            campoLatitud.setText(String.valueOf(unPOI.getLatitud()));
            campoLongitud.setText(String.valueOf(unPOI.getLongitud()));
            comboCategorias.setSelectedItem(BrokerCategoriasPOI.getInstance().getCatPOIFromDB(unPOI.getIdCategoriaPOI()));
            campoDescripcionNuevoPoi.setText(unPOI.getDescripcion());
            setTempPOI(unPOI);
        } else {
            habilitaPanelDatosPOIs(false);
            setModificandoPOI(false);
            JOptionPane.showMessageDialog(null, "Seleccione un POI primero");
        }
    }

    private void btnGuardarPOIActionPerformed(java.awt.event.ActionEvent evt) {
        if (Double.valueOf(campoLatitud.getText()) == 0) {
            JOptionPane.showMessageDialog(null, "La latitud no puede ser igual a 0");
            return;
        }
        if (Double.valueOf(campoLongitud.getText()) == 0) {
            JOptionPane.showMessageDialog(null, "La longitud no puede ser igual a 0");
            return;
        }

        if (modificandoPOI) {
            //modifica POI
            POI unPOI = getTempPOI();
            unPOI.setLatitud(Double.valueOf(campoLatitud.getText()));
            unPOI.setLongitud(Double.valueOf(campoLongitud.getText()));
            CategoriaPoi cP = (CategoriaPoi) comboCategorias.getSelectedItem();
            unPOI.setIdCategoriaPOI(cP.getId());
            unPOI.setDescripcion(campoDescripcionNuevoPoi.getText());
            controllers.ControllerPois.getInstance().modificaPOI(unPOI);
            setModificandoPOI(false);
        } else {
            // Agrega/inserta POI:
            if (comboCategorias.getSelectedIndex() != -1 && campoDescripcionNuevoPoi.getText().length() > 2) {
                CategoriaPoi cP = (CategoriaPoi) comboCategorias.getSelectedItem();
                controllers.ControllerPois.getInstance().agregaPOI(cP.getId(), campoDescripcionNuevoPoi.getText(), Double.valueOf(campoLatitud.getText()), Double.valueOf(campoLongitud.getText()));
                //cargaGrillaPOIS();
            } else {
                JOptionPane.showMessageDialog(null, "No se selecciono una categoria o el nombre no es valido");
            }
        }
        habilitaPanelDatosPOIs(false);
        cargaGrillaPOIS();
    }

    private void btnEliminarPOIActionPerformed(java.awt.event.ActionEvent evt) {
        if (JOptionPane.showConfirmDialog(null,
                "Desea eliminar los POIs seleccionados?",
                "Eliminar POIs",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE) == 0) {
            for (int i = 0; i < tablaPois.getRowCount(); i++) {
                if ((Boolean) tablaPois.getValueAt(i, tablaPois.getColumnCount(false) - 1)) {
                    controllers.ControllerPois.getInstance().eliminaPOI((POI) tablaPois.getValueAt(i, 0));
                }
            }
        }
        cargaGrillaPOIS();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXHyperlink btnEliminaCatPOI;
    private org.jdesktop.swingx.JXHyperlink btnEliminarPOI;
    private org.jdesktop.swingx.JXHyperlink btnGuardarCatPOI;
    private org.jdesktop.swingx.JXHyperlink btnGuardarPOI;
    private org.jdesktop.swingx.JXHyperlink btnInsertarCatPOI;
    private org.jdesktop.swingx.JXHyperlink btnInsertarPOI;
    private org.jdesktop.swingx.JXHyperlink btnModificarCatPOI;
    private org.jdesktop.swingx.JXHyperlink btnModificarPOI;
    private javax.swing.JTextField campoDescripcionNuevoPoi;
    private javax.swing.JTextField campoLatitud;
    private javax.swing.JTextField campoLongitud;
    private javax.swing.JTextField campoNombreNuevaCat;
    private javax.swing.JComboBox comboCategorias;
    private javax.swing.JComboBox comboIconoCatPoi;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private org.jdesktop.swingx.JXLabel lblAccionesCampania1;
    private org.jdesktop.swingx.JXLabel lblAccionesPOI;
    private org.jdesktop.swingx.JXLabel lblCategoria;
    private org.jdesktop.swingx.JXLabel lblDescripciónNuevoPoi;
    private org.jdesktop.swingx.JXLabel lblIconoCatPoi;
    private org.jdesktop.swingx.JXLabel lblLatitud;
    private org.jdesktop.swingx.JXLabel lblLongitud;
    private org.jdesktop.swingx.JXLabel lblNombreNuevaCat;
    private org.jdesktop.swingx.JXLabel lblTitulo;
    private org.jdesktop.swingx.JXLabel lblTituloTablaCategorias;
    private org.jdesktop.swingx.JXLabel lblTituloTablaPois;
    private org.jdesktop.swingx.JXPanel panelAcciones;
    private org.jdesktop.swingx.JXPanel panelAcciones1;
    private org.jdesktop.swingx.JXPanel panelAccionesCatPOIElegido;
    private org.jdesktop.swingx.JXPanel panelAccionesPOIElegido;
    private org.jdesktop.swingx.JXPanel panelAgregaCategoria;
    private org.jdesktop.swingx.JXPanel panelCatNuevoPoi;
    private org.jdesktop.swingx.JXPanel panelCatTitulo;
    private org.jdesktop.swingx.JXPanel panelCategoriaPois;
    private org.jdesktop.swingx.JXPanel panelDatosPoi;
    private org.jdesktop.swingx.JXPanel panelDescripNuevoPoi;
    private org.jdesktop.swingx.JXPanel panelLatitud;
    private org.jdesktop.swingx.JXPanel panelLongitud;
    private org.jdesktop.swingx.JXPanel panelNombreNuevaCat;
    private org.jdesktop.swingx.JXPanel panelPois;
    private org.jdesktop.swingx.JXPanel panelPoisTitulo;
    private org.jdesktop.swingx.JXPanel panelSurCatPois;
    private org.jdesktop.swingx.JXPanel panelSurPois;
    private org.jdesktop.swingx.JXPanel panelTablaCategorias;
    private org.jdesktop.swingx.JXPanel panelTablaPois;
    private org.jdesktop.swingx.JXPanel panelTitulo;
    private org.jdesktop.swingx.JXPanel panelTodo;
    private org.jdesktop.swingx.JXTable tablaCategorias;
    private org.jdesktop.swingx.JXTable tablaPois;
    // End of variables declaration//GEN-END:variables

    public static PanelOpcPOIs getInstance() {
        if (unicaInstancia == null) {
            unicaInstancia = new PanelOpcPOIs();
        }
        return unicaInstancia;
    }

    private void inicializador() {
        try {
            cargaGrillaPOIS();
            cargaGrillaCategoriaPOIS();
            cargaComboCategorias();
            cargaComboIconosCategorias();
            habilitaPanelDatosPOIs(false);
            habilitaPanelDatosCatPOIs(false);
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    //main de prueba

    public static void main(String[] args) {
        javax.swing.JFrame elFrame = new javax.swing.JFrame();
        elFrame.setSize(500, 500);
        PanelOpcPOIs a = new PanelOpcPOIs();
        //cargaEspecies();
        elFrame.add(a);
        elFrame.setVisible(true);
    }

    private void cargaComboCategorias() {
        //carga combo
        comboCategorias.removeAllItems();
        for (CategoriaPoi cP : controllers.ControllerPois.getInstance().cargaCategoriasPOI()) {
            comboCategorias.addItem(cP);
        }
    }

    private void cargaGrillaCategoriaPOIS() {
        //DefaultTableModel dm = (DefaultTableModel) tablaCategorias.getModel(); 
        //modeloTablaCategoriasPOI = (DefaultTableModel) tablaCategorias.getModel();
        //tablaCategorias.setModel(modeloTablaCategoriasPOI);
        //---ControllerPpal.getInstance().vaciarJTable(modeloTablaCategoriasPOI);
        //dm.setRowCount(0);
        modeloTablaCategoriasPOI.setRowCount(0);
        int cantCols = 4;
        //Cabecera
        /*String[] encabezado = new String[4];
        encabezado[0] = "id";
        encabezado[1] = "Nombre de la categoria";
        encabezado[2] = "Icono";
        encabezado[3] = "Acciones";
        dm.setColumnIdentifiers(encabezado);*/
        /*modeloTablaCategoriasPOI.addColumn("id");
        modeloTablaCategoriasPOI.addColumn("Nombre de la categoria");
        modeloTablaCategoriasPOI.addColumn("Icono");
        modeloTablaCategoriasPOI.addColumn("Acciones");*/
        //Cuerpo
        ArrayList a = new ArrayList();
        for (CategoriaPoi cP : BrokerCategoriasPOI.getInstance().getCatPOISFromDB()) {
            a.add(cP.getId());
            a.add(cP); //<-- Titulo, Aca esta el objeto entero
            a.add(new ImageIcon(cP.getPathIcono())); // me hace el toString aunque le pase el objeto ¬¬
            a.add("false");
            modeloTablaCategoriasPOI.addRow(ControllerPpal.getInstance().creaUnaFilaGenerica(cantCols, a));
            a.clear();
        }
        tablaCategorias.setModel(modeloTablaCategoriasPOI);
        //escondo la columna ID 
        ControllerPpal.getInstance().ocultarColJTable(tablaCategorias, 0);
    }

    private void cargaGrillaPOIS() {
        try {
            //DefaultTableModel dm = (DefaultTableModel) tablaPois.getModel();
            //modeloTablaPOIS = (DefaultTableModel) tablaPois.getModel();
            //tablaPois.setModel(modeloTablaPOIS);
            //---ControllerPpal.getInstance().vaciarJTable(modeloTablaPOIS);
            modeloTablaPOIS.setRowCount(0);//vacia la tabla
            //dm.setRowCount(0);
            int cantCols = 6;
            //Cabecera
            /*String[] encabezado = new String[6];
            encabezado[0] = "id";
            encabezado[1] = "Fecha y Hora";
            encabezado[2] = "Categoria";
            encabezado[3] = "Coordenadas";
            encabezado[4] = "Descripcion";
            encabezado[5] = "Acciones";
            modeloTablaPOIS.setColumnCount(cantCols-1);
            modeloTablaPOIS.setColumnIdentifiers(encabezado);*/
            // modeloTablaPOIS.setColumnCount(cantCols);
            /*modeloTablaPOIS.addColumn("id");
            modeloTablaPOIS.addColumn("Fecha y Hora");
            modeloTablaPOIS.addColumn("Categoria");
            modeloTablaPOIS.addColumn("Coordenadas");
            modeloTablaPOIS.addColumn("Descripcion");
            modeloTablaPOIS.addColumn("Acciones");*/

            //Cuerpo

            /*for (POI p : BrokerPOIs.getInstance().getPOISFromDB()) {
            dm.addRow(agregaUnaFilaPOI(p.getId(), p.getFechaHora(), BrokerCategoriasPOI.getInstance().getCatPOIFromDB(p.getIdCategoriaPOI()).getTitulo(), p.getDescripcion(), p.getLatitud(), p.getLongitud()));
            }*/
            ArrayList a = new ArrayList();
            for (POI p : BrokerPOIs.getInstance().getPOISFromDB()) {
                a.add(p); //agrega el objeto POI, pero muestra el id
                a.add(p.getFechaHora());
                //cuando no esta la categoria explota
                a.add(BrokerCategoriasPOI.getInstance().getCatPOIFromDB(p.getIdCategoriaPOI()).getTitulo());
                String coordenadas = String.valueOf(p.getLatitud()) + "," + String.valueOf(p.getLongitud());
                a.add(coordenadas);
                a.add(p.getDescripcion());
                a.add("false");
                modeloTablaPOIS.addRow(ControllerPpal.getInstance().creaUnaFilaGenerica(cantCols, a));
                a.clear();
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        tablaPois.setModel(modeloTablaPOIS);
        //escondo la columna ID 
        ControllerPpal.getInstance().ocultarColJTable(tablaPois, 0);
    }

    /**
     * @return the modificandoPOI
     */
    public boolean isModificandoPOI() {
        return modificandoPOI;
    }

    /**
     * @param modificandoPOI the modificandoPOI to set
     */
    public void setModificandoPOI(boolean modificandoPOI) {
        this.modificandoPOI = modificandoPOI;
    }

    private void habilitaPanelDatosPOIs(boolean estado) {
        campoLatitud.setEnabled(estado);
        campoLongitud.setEnabled(estado);
        campoDescripcionNuevoPoi.setEnabled(estado);
        campoNombreNuevaCat.setEnabled(estado);
        lblLatitud.setEnabled(estado);
        lblLongitud.setEnabled(estado);
        lblCategoria.setEnabled(estado);
        lblDescripciónNuevoPoi.setEnabled(estado);
        //btnAgregaPoi.setEnabled(estado);
        //Limpio
        campoLatitud.setText("");
        campoLongitud.setText("");
        campoDescripcionNuevoPoi.setText("");
        //si lo deshabilito habilito la barra
        if (!estado) {
            btnEliminarPOI.setEnabled(!estado);
            btnInsertarPOI.setEnabled(!estado);
            btnModificarPOI.setEnabled(!estado);
            btnGuardarPOI.setEnabled(estado);
        }
    }

    /**
     * @return the tempPOI
     */
    public POI getTempPOI() {
        return tempPOI;
    }

    /**
     * @param tempPOI the tempPOI to set
     */
    public void setTempPOI(POI tempPOI) {
        this.tempPOI = tempPOI;
    }

    private void cargaComboIconosCategorias() {
        //carga combo iconos   
        comboIconoCatPoi.removeAllItems();
        for (String rutaIcono : ControllerPpal.getInstance().listadoIconosCatPOI()) {
            comboIconoCatPoi.addItem(rutaIcono); //si no agrego elementos no hace el render
        }
        RenderCombo rc = new RenderCombo();
        comboIconoCatPoi.setRenderer(rc);
    }

    private void habilitaPanelDatosCatPOIs(boolean estado) {
        campoNombreNuevaCat.setEnabled(estado);
        lblIconoCatPoi.setEnabled(estado);
        lblNombreNuevaCat.setEnabled(estado);
        lblIconoCatPoi.setEnabled(estado);
        //Limpio
        campoNombreNuevaCat.setText("");
        //si lo deshabilito habilito la barra
        if (!estado) {
            btnGuardarCatPOI.setEnabled(estado);
            btnInsertarCatPOI.setEnabled(!estado);
            btnModificarCatPOI.setEnabled(!estado);
            btnEliminaCatPOI.setEnabled(!estado);
        }
    }

    /**
     * @return the tempCatPOI
     */
    public CategoriaPoi getTempCatPOI() {
        return tempCatPOI;
    }

    /**
     * @param tempCatPOI the tempCatPOI to set
     */
    public void setTempCatPOI(CategoriaPoi tempCatPOI) {
        this.tempCatPOI = tempCatPOI;
    }

    /**
     * @return the modificandoCatPOI
     */
    public boolean isModificandoCatPOI() {
        return modificandoCatPOI;
    }

    /**
     * @param modificandoCatPOI the modificandoCatPOI to set
     */
    public void setModificandoCatPOI(boolean modificandoCatPOI) {
        this.modificandoCatPOI = modificandoCatPOI;
    }
}


/*
            if (metodoEscaneaIconos()>0){
 * while que carga el combo{
                //--- resize Icon
                Image source = new ImageIcon(modelo.dataCapture.Sistema.getInstance().getRutaIconosCatPois()+cP.getPathIcono()).getImage();
                BufferedImage image = new BufferedImage(source.getWidth(null), source.getHeight(null), BufferedImage.TYPE_INT_ARGB);
                Graphics2D g2d = (Graphics2D)image.getGraphics();
                g2d.drawImage(source, 0, 0, null);
                g2d.dispose();
                //-------------
                combo.addItem(modelo.dataCapture.Sistema.getInstance().getLabelWithImgResized(25, 32, image));//en la columna 2 va el Icono
            }
 }
 */
