/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelFinalizarLance.java
 *
 * Created on 23/04/2012, 02:31:19
 */
package gui;

import controllers.ControllerLance;
import controllers.ControllerPpal;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.ComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.dataManager.Cajon;
import modelo.dataManager.CategoriaPoi;
import modelo.dataManager.Especie;
import modelo.dataManager.Lance;
import persistencia.BrokerCajon;
import persistencia.BrokerCategoriasPOI;
import persistencia.BrokerEspecie;
import persistencia.BrokerLance;
import persistencia.Logueador;

/**
 *
 * @author Sebastian
 */
public class PanelOpcCajones extends javax.swing.JPanel {

    static PanelOpcCajones unicaInstancia;
    private boolean modificandoCajon;
    private Cajon tempCajon;
    private Lance tempLanceSeleccionado;
    private DefaultTableModel modeloTablaCajones = new javax.swing.table.DefaultTableModel(
            new Object[][]{},
            new String[]{
                "idLance", "# Cajones", "Especie"//, "Acciones"
            }) {

        Class[] types = new Class[]{
            java.lang.Object.class, java.lang.Object.class, java.lang.Object.class//, java.lang.Boolean.class
        };

        @Override
        public Class getColumnClass(int columnIndex) {
            return types[columnIndex];
        }
    };

    /** Creates new form PanelFinalizarLance */
    private PanelOpcCajones() {
        initComponents();
        inicializador();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelSuperior = new org.jdesktop.swingx.JXPanel();
        lblTitulo = new org.jdesktop.swingx.JXLabel();
        panelMedio = new org.jdesktop.swingx.JXPanel();
        panelCajones = new org.jdesktop.swingx.JXPanel();
        panelTituloTabla = new org.jdesktop.swingx.JXPanel();
        lblTituloTabla = new org.jdesktop.swingx.JXLabel();
        panelTabla = new org.jdesktop.swingx.JXPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCajones = new org.jdesktop.swingx.JXTable();
        panelTotalCajones = new org.jdesktop.swingx.JXPanel();
        lblTotalCajones = new org.jdesktop.swingx.JXLabel();
        panelAccionesCajones = new org.jdesktop.swingx.JXPanel();
        lblAccionesCajones = new org.jdesktop.swingx.JXLabel();
        panelAcciones = new org.jdesktop.swingx.JXPanel();
        btnModificarCajon = new org.jdesktop.swingx.JXHyperlink();
        btnGuardarCajon = new org.jdesktop.swingx.JXHyperlink();
        btnEliminarCajon = new org.jdesktop.swingx.JXHyperlink();
        btnInsertarCajon = new org.jdesktop.swingx.JXHyperlink();
        panelEspecie = new org.jdesktop.swingx.JXPanel();
        panelCantCajones = new org.jdesktop.swingx.JXPanel();
        lblCantCajones = new org.jdesktop.swingx.JXLabel();
        campoCajones = new javax.swing.JTextField();
        panelComboEspecie = new org.jdesktop.swingx.JXPanel();
        lblEspecie = new org.jdesktop.swingx.JXLabel();
        comboEspecies = new javax.swing.JComboBox();
        panelInferior = new org.jdesktop.swingx.JXPanel();
        btnGuardarCajonesLance = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(500, 500));
        setMinimumSize(new java.awt.Dimension(500, 500));
        setPreferredSize(new java.awt.Dimension(500, 500));
        setLayout(new java.awt.BorderLayout());

        panelSuperior.setMaximumSize(new java.awt.Dimension(500, 30));
        panelSuperior.setMinimumSize(new java.awt.Dimension(500, 30));
        panelSuperior.setPreferredSize(new java.awt.Dimension(500, 30));

        lblTitulo.setText("Administraci√≥n de la pesca");
        lblTitulo.setFont(new java.awt.Font("Arial", 0, 18));
        panelSuperior.add(lblTitulo);

        add(panelSuperior, java.awt.BorderLayout.NORTH);

        panelMedio.setMaximumSize(new java.awt.Dimension(500, 420));
        panelMedio.setMinimumSize(new java.awt.Dimension(500, 420));
        panelMedio.setPreferredSize(new java.awt.Dimension(500, 420));
        panelMedio.setLayout(new java.awt.BorderLayout());

        panelCajones.setMaximumSize(new java.awt.Dimension(500, 400));
        panelCajones.setMinimumSize(new java.awt.Dimension(500, 320));
        panelCajones.setPreferredSize(new java.awt.Dimension(500, 400));

        panelTituloTabla.setMaximumSize(new java.awt.Dimension(500, 30));
        panelTituloTabla.setMinimumSize(new java.awt.Dimension(500, 30));
        panelTituloTabla.setPreferredSize(new java.awt.Dimension(500, 30));
        panelTituloTabla.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 10));

        lblTituloTabla.setText("Cajones recogidos en el lance:");
        lblTituloTabla.setFont(new java.awt.Font("Tahoma", 0, 12));
        panelTituloTabla.add(lblTituloTabla);

        panelCajones.add(panelTituloTabla);

        panelTabla.setMaximumSize(new java.awt.Dimension(500, 190));
        panelTabla.setMinimumSize(new java.awt.Dimension(500, 190));
        panelTabla.setPreferredSize(new java.awt.Dimension(500, 190));

        jScrollPane1.setMaximumSize(new java.awt.Dimension(500, 170));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(500, 170));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 170));

        tablaCajones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "# Cajones", "Especie"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaCajones);
        tablaCajones.getColumnModel().getColumn(0).setMinWidth(40);
        tablaCajones.getColumnModel().getColumn(0).setPreferredWidth(40);
        tablaCajones.getColumnModel().getColumn(1).setMinWidth(350);
        tablaCajones.getColumnModel().getColumn(1).setPreferredWidth(350);

        javax.swing.GroupLayout panelTablaLayout = new javax.swing.GroupLayout(panelTabla);
        panelTabla.setLayout(panelTablaLayout);
        panelTablaLayout.setHorizontalGroup(
            panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTablaLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelTablaLayout.setVerticalGroup(
            panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
        );

        panelCajones.add(panelTabla);

        panelTotalCajones.setPreferredSize(new java.awt.Dimension(500, 56));
        panelTotalCajones.setLayout(new java.awt.BorderLayout());

        lblTotalCajones.setText("Cantidad de cajones: ");
        panelTotalCajones.add(lblTotalCajones, java.awt.BorderLayout.CENTER);

        panelCajones.add(panelTotalCajones);

        panelAccionesCajones.setMaximumSize(new java.awt.Dimension(500, 30));
        panelAccionesCajones.setMinimumSize(new java.awt.Dimension(500, 30));
        panelAccionesCajones.setPreferredSize(new java.awt.Dimension(500, 30));

        lblAccionesCajones.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccionesCajones.setText("Acciones sobre los cajones elegidos:");
        lblAccionesCajones.setFont(new java.awt.Font("Tahoma", 0, 14));

        panelAcciones.setMaximumSize(new java.awt.Dimension(184, 30));
        panelAcciones.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 20, 5));

        btnModificarCajon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/tabla-icono-editar.png"))); // NOI18N
        btnModificarCajon.setText("");
        btnModificarCajon.setToolTipText("Modificar");
        btnModificarCajon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnModificarCajon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarCajonActionPerformed(evt);
            }
        });
        panelAcciones.add(btnModificarCajon);

        btnGuardarCajon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/tabla-icono-guardar.png"))); // NOI18N
        btnGuardarCajon.setText("");
        btnGuardarCajon.setToolTipText("Guardar cambios");
        btnGuardarCajon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnGuardarCajon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCajonActionPerformed(evt);
            }
        });
        panelAcciones.add(btnGuardarCajon);

        btnEliminarCajon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/tabla-icono-eliminar.png"))); // NOI18N
        btnEliminarCajon.setText("");
        btnEliminarCajon.setToolTipText("Eliminar");
        btnEliminarCajon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnEliminarCajon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarCajonActionPerformed(evt);
            }
        });
        panelAcciones.add(btnEliminarCajon);

        btnInsertarCajon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/tabla-icono-insertar.png"))); // NOI18N
        btnInsertarCajon.setText("");
        btnInsertarCajon.setToolTipText("Agregar");
        btnInsertarCajon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnInsertarCajon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarCajonActionPerformed(evt);
            }
        });
        panelAcciones.add(btnInsertarCajon);

        javax.swing.GroupLayout panelAccionesCajonesLayout = new javax.swing.GroupLayout(panelAccionesCajones);
        panelAccionesCajones.setLayout(panelAccionesCajonesLayout);
        panelAccionesCajonesLayout.setHorizontalGroup(
            panelAccionesCajonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAccionesCajonesLayout.createSequentialGroup()
                .addComponent(lblAccionesCajones, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(panelAcciones, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelAccionesCajonesLayout.setVerticalGroup(
            panelAccionesCajonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblAccionesCajones, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(panelAcciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        panelCajones.add(panelAccionesCajones);

        panelEspecie.setMaximumSize(new java.awt.Dimension(500, 50));
        panelEspecie.setMinimumSize(new java.awt.Dimension(500, 50));
        panelEspecie.setPreferredSize(new java.awt.Dimension(500, 50));

        panelCantCajones.setMaximumSize(new java.awt.Dimension(150, 50));
        panelCantCajones.setMinimumSize(new java.awt.Dimension(150, 50));
        panelCantCajones.setPreferredSize(new java.awt.Dimension(150, 50));
        panelCantCajones.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 15));

        lblCantCajones.setText("Cant. Cajones");
        lblCantCajones.setFont(new java.awt.Font("Tahoma", 0, 12));
        panelCantCajones.add(lblCantCajones);

        campoCajones.setFont(new java.awt.Font("Tahoma", 0, 12));
        campoCajones.setMaximumSize(new java.awt.Dimension(40, 20));
        campoCajones.setMinimumSize(new java.awt.Dimension(40, 20));
        campoCajones.setPreferredSize(new java.awt.Dimension(40, 20));
        panelCantCajones.add(campoCajones);

        panelEspecie.add(panelCantCajones);

        panelComboEspecie.setMaximumSize(new java.awt.Dimension(270, 50));
        panelComboEspecie.setMinimumSize(new java.awt.Dimension(270, 50));
        panelComboEspecie.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 15));

        lblEspecie.setText("Especie");
        lblEspecie.setFont(new java.awt.Font("Tahoma", 0, 12));
        panelComboEspecie.add(lblEspecie);

        comboEspecies.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        comboEspecies.setMaximumSize(new java.awt.Dimension(200, 20));
        comboEspecies.setMinimumSize(new java.awt.Dimension(200, 20));
        comboEspecies.setPreferredSize(new java.awt.Dimension(200, 20));
        comboEspecies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboEspeciesActionPerformed(evt);
            }
        });
        panelComboEspecie.add(comboEspecies);

        panelEspecie.add(panelComboEspecie);

        panelCajones.add(panelEspecie);

        panelMedio.add(panelCajones, java.awt.BorderLayout.NORTH);

        add(panelMedio, java.awt.BorderLayout.CENTER);

        panelInferior.setMaximumSize(new java.awt.Dimension(500, 50));
        panelInferior.setMinimumSize(new java.awt.Dimension(500, 50));
        panelInferior.setPreferredSize(new java.awt.Dimension(500, 50));
        panelInferior.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        btnGuardarCajonesLance.setFont(new java.awt.Font("Tahoma", 0, 12));
        btnGuardarCajonesLance.setText("Cerrar");
        btnGuardarCajonesLance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCajonesLanceActionPerformed(evt);
            }
        });
        panelInferior.add(btnGuardarCajonesLance);

        add(panelInferior, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void comboEspeciesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboEspeciesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboEspeciesActionPerformed

    private void btnGuardarCajonesLanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCajonesLanceActionPerformed

        //saco el lance seleccionado y vuelvo a la ventana lances
        setTempLanceSeleccionado(null);
        VentanaIbape.getInstance().ponerEnPanelDerecho(PanelOpcLances.getInstance());
        PanelOpcLances.getInstance().cargaGrillaLances();
    }//GEN-LAST:event_btnGuardarCajonesLanceActionPerformed

    private void btnModificarCajonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarCajonActionPerformed
        habilitaPanelDatosCajones(true);
        setModificandoCajon(true);
        btnEliminarCajon.setEnabled(false);
        btnInsertarCajon.setEnabled(false);
        btnModificarCajon.setEnabled(false);
        btnGuardarCajon.setEnabled(true);
        //cargo la fila seleccionada en el formulario
        if (tablaCajones.getSelectedRowCount() != 0) {
            Cajon unCajon = (Cajon) tablaCajones.getValueAt(tablaCajones.getSelectedRow(), 0);
            campoCajones.setText(String.valueOf(unCajon.getCantidad()));
            //ver el icono
            setTempCajon(unCajon);
        } else {
            habilitaPanelDatosCajones(false);
            setModificandoCajon(false);
            JOptionPane.showMessageDialog(null, "Seleccione un cajon primero");
        }
    }//GEN-LAST:event_btnModificarCajonActionPerformed

    private void btnGuardarCajonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCajonActionPerformed
        // TODO add your handling code here:
        /*        if (!campoCajones.getText().isEmpty() && Integer.valueOf(campoCajones.getText()) > 0 && comboEspecies.getSelectedIndex() > -1) {
        Cajon unCajon = new Cajon();
        unCajon.setIdLance(tempLanceSeleccionado.getId());
        Especie unaEsp = (Especie) comboEspecies.getSelectedItem();
        unCajon.setIdEspecie(unaEsp.getId());
        unCajon.setCantidad(Integer.valueOf(campoCajones.getText()));
        controllers.ControllerLance.getInstance().addCajon(unCajon)
        
        
        cargaGrillaCajones();
        } else {
        JOptionPane.showMessageDialog(null, "No se selecciono una especie o cantidad");
        }*/
        if (campoCajones.getText().equals("") || Integer.valueOf(campoCajones.getText())==0) {
            JOptionPane.showMessageDialog(null, "Ingrese una cantidad");
            return;
        }
        if (comboEspecies.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione una especie");
            return;
        }
        Cajon unCajon = new Cajon();
        unCajon.setIdLance(tempLanceSeleccionado.getId());
        Especie unaEsp = (Especie) comboEspecies.getSelectedItem();
        unCajon.setIdEspecie(unaEsp.getId());
        unCajon.setCantidad(Integer.valueOf(campoCajones.getText()));
        if (modificandoCajon) {
            //modifica Cajon
            controllers.ControllerLance.getInstance().modificaCajon(unCajon);
            setModificandoCajon(false);
        } else {
            // Agrega/inserta Cajon:
            if (!campoCajones.getText().isEmpty() && Integer.valueOf(campoCajones.getText()) > 0 && comboEspecies.getSelectedIndex() > -1) {
                controllers.ControllerLance.getInstance().agregaCajon(unCajon);
            } else {
                JOptionPane.showMessageDialog(null, "No se selecciono una especie o cantidad");
            }
        }
        habilitaPanelDatosCajones(false);
        cargaGrillaCajones();
    }//GEN-LAST:event_btnGuardarCajonActionPerformed

    private void btnEliminarCajonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarCajonActionPerformed
        if (tablaCajones.getSelectedRowCount() != 0) {
            int[] listaCajonesSeleccionados = tablaCajones.getSelectedRows();
            if (JOptionPane.showConfirmDialog(null,
                    "Desea eliminar " + listaCajonesSeleccionados.length + " cajones seleccionados?",
                    "Eliminar cajones",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE) == 0) {
                int i = 0;
                while (i < listaCajonesSeleccionados.length) {
                    controllers.ControllerLance.getInstance().eliminaCajon((Cajon) tablaCajones.getValueAt(listaCajonesSeleccionados[i], 0));
                    i++;
                }
                cargaGrillaCajones();
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se seleccionaron cajones");
        }
    }//GEN-LAST:event_btnEliminarCajonActionPerformed

    private void btnInsertarCajonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarCajonActionPerformed
        // TODO add your handling code here:
        habilitaPanelDatosCajones(true);
        btnModificarCajon.setEnabled(false);
        btnEliminarCajon.setEnabled(false);
        btnInsertarCajon.setEnabled(false);
        btnGuardarCajon.setEnabled(true);
    }//GEN-LAST:event_btnInsertarCajonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXHyperlink btnEliminarCajon;
    private org.jdesktop.swingx.JXHyperlink btnGuardarCajon;
    private javax.swing.JButton btnGuardarCajonesLance;
    private org.jdesktop.swingx.JXHyperlink btnInsertarCajon;
    private org.jdesktop.swingx.JXHyperlink btnModificarCajon;
    private javax.swing.JTextField campoCajones;
    private javax.swing.JComboBox comboEspecies;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXLabel lblAccionesCajones;
    private org.jdesktop.swingx.JXLabel lblCantCajones;
    private org.jdesktop.swingx.JXLabel lblEspecie;
    private org.jdesktop.swingx.JXLabel lblTitulo;
    private org.jdesktop.swingx.JXLabel lblTituloTabla;
    private org.jdesktop.swingx.JXLabel lblTotalCajones;
    private org.jdesktop.swingx.JXPanel panelAcciones;
    private org.jdesktop.swingx.JXPanel panelAccionesCajones;
    private org.jdesktop.swingx.JXPanel panelCajones;
    private org.jdesktop.swingx.JXPanel panelCantCajones;
    private org.jdesktop.swingx.JXPanel panelComboEspecie;
    private org.jdesktop.swingx.JXPanel panelEspecie;
    private org.jdesktop.swingx.JXPanel panelInferior;
    private org.jdesktop.swingx.JXPanel panelMedio;
    private org.jdesktop.swingx.JXPanel panelSuperior;
    private org.jdesktop.swingx.JXPanel panelTabla;
    private org.jdesktop.swingx.JXPanel panelTituloTabla;
    private org.jdesktop.swingx.JXPanel panelTotalCajones;
    private org.jdesktop.swingx.JXTable tablaCajones;
    // End of variables declaration//GEN-END:variables

    public static PanelOpcCajones getInstance() {
        if (unicaInstancia == null) {
            unicaInstancia = new PanelOpcCajones();
        }
        return unicaInstancia;
    }

    //main de prueba 
    public static void main(String[] args) {
        javax.swing.JFrame elFrame = new javax.swing.JFrame();
        elFrame.setSize(500, 500);
        PanelOpcCajones a = new PanelOpcCajones();
        elFrame.add(a);
        elFrame.setVisible(true);
    }

    private void inicializador() {
        habilitaPanelDatosCajones(false);
        cargaComboEspecies();
        btnModificarCajon.setVisible(false); // no se usa, se borra y s evuelve a agregar
        //validadores de los campos
        Cls_ManejoTeclas obj_teclas = new Cls_ManejoTeclas();
        campoCajones.addKeyListener(obj_teclas);
    }

    private void modificarCajon() {
        throw new UnsupportedOperationException("Not yet implemented");
    }

    public void cargaGrillaCajones() {
        modeloTablaCajones.setRowCount(0);//vacia la tabla
        for (Cajon unCajon : BrokerCajon.getInstance().getCajonesLanceFromDB(tempLanceSeleccionado.getId())) {
            modeloTablaCajones.addRow(new Object[]{
                        unCajon,//<--Aca esta el objeto -muestra idLance
                        unCajon.getCantidad(),
                        BrokerEspecie.getInstance().getEspecieFromDB(unCajon.getIdEspecie()).getNombre()
                    });
        }
        tablaCajones.setModel(modeloTablaCajones);
        ControllerPpal.getInstance().ocultarColJTable(tablaCajones, 0);
        lblTotalCajones.setText("Total de cajones del lance: "+BrokerCajon.getInstance().getCajonesFromLance(tempLanceSeleccionado.getId()));
    }

    private void cargaComboEspecies() {
        try {
            comboEspecies.removeAllItems();
            for (Especie i : controllers.ControllerLance.getInstance().getListadoEspecies()) {
                comboEspecies.addItem(i);
            }
        } catch (Exception e) {
            Logueador.getInstance().agregaAlLog(e.toString());
        }
    }

    private void habilitaPanelDatosCajones(boolean estado) {
        campoCajones.setEnabled(estado);
        campoCajones.setText("");
        //si lo deshabilito habilito la barra
        if (!estado) {
            btnEliminarCajon.setEnabled(!estado);
            btnInsertarCajon.setEnabled(!estado);
            btnModificarCajon.setEnabled(!estado);
            btnGuardarCajon.setEnabled(estado);
        }
    }

    /**
     * @return the modificandoCajon
     */
    public boolean isModificandoCajon() {
        return modificandoCajon;
    }

    /**
     * @param modificandoCajon the modificandoCajon to set
     */
    public void setModificandoCajon(boolean modificandoCajon) {
        this.modificandoCajon = modificandoCajon;
    }

    /**
     * @return the tempCajon
     */
    public Cajon getTempCajon() {
        return tempCajon;
    }

    /**
     * @param tempCajon the tempCajon to set
     */
    public void setTempCajon(Cajon tempCajon) {
        this.tempCajon = tempCajon;
    }

    /**
     * @return the tempLanceSeleccionado
     */
    public Lance getTempLanceSeleccionado() {
        return tempLanceSeleccionado;
    }

    /**
     * @param tempLanceSeleccionado the tempLanceSeleccionado to set
     */
    public void setTempLanceSeleccionado(Lance tempLanceSeleccionado) {
        this.tempLanceSeleccionado = tempLanceSeleccionado;
    }

    class Cls_ManejoTeclas extends KeyAdapter {

        public void keyTyped(KeyEvent ke) {
            char loc_caracter = ke.getKeyChar();
            if (((loc_caracter < '0') || (loc_caracter > '9')) && (loc_caracter != KeyEvent.VK_BACK_SPACE)) {
                ke.consume();
            }
        }
    }
}